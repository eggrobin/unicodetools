package org.unicode.propstest;

import com.ibm.icu.dev.util.CollectionUtilities;
import com.ibm.icu.dev.util.UnicodeMap;
import com.ibm.icu.dev.util.UnicodeMap.EntryRange;
import com.ibm.icu.impl.Utility;
import com.ibm.icu.text.NumberFormat;
import com.ibm.icu.text.Transform;
import com.ibm.icu.text.UnicodeSet;
import com.ibm.icu.text.UnicodeSetIterator;
import com.ibm.icu.util.VersionInfo;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.unicode.cldr.util.Counter;
import org.unicode.props.GenerateEnums;
import org.unicode.props.IndexUnicodeProperties;
import org.unicode.props.IndexUnicodeProperties.DefaultValueType;
import org.unicode.props.PropertyNames;
import org.unicode.props.PropertyType;
import org.unicode.props.PropertyValueSets;
import org.unicode.props.UcdProperty;
import org.unicode.props.UcdPropertyValues;
import org.unicode.props.UcdPropertyValues.Age_Values;
import org.unicode.props.UcdPropertyValues.Binary;
import org.unicode.props.UcdPropertyValues.General_Category_Values;
import org.unicode.props.UcdPropertyValues.Line_Break_Values;
import org.unicode.props.UcdPropertyValues.Numeric_Type_Values;
import org.unicode.props.UcdPropertyValues.Script_Values;
import org.unicode.props.ValueCardinality;
import org.unicode.tools.emoji.EmojiData;
import org.unicode.unittest.TestFmwkMinusMinus;

public class TestProperties extends TestFmwkMinusMinus {

    // TODO generate list of versions, plus 'latest'

    private static final IndexUnicodeProperties iup =
            IndexUnicodeProperties.make(GenerateEnums.ENUM_VERSION);
    private static final UnicodeMap<String> newName = iup.load(UcdProperty.Name);
    private static final UnicodeMap<String> blocks = iup.load(UcdProperty.Block);
    private static final IndexUnicodeProperties lastVersion = IndexUnicodeProperties.make("6.3");
    private static final UnicodeMap<String> generalCategory =
            iup.load(UcdProperty.General_Category);
    private static final UnicodeSet newChars =
            iup.load(UcdProperty.Age).getSet(UcdPropertyValues.Age_Values.V7_0.name());
    private static final UnicodeMap<String> nameMap = iup.load(UcdProperty.Name);

    @Test
    public void TestPropertyValuesSetCoverage() {
        EnumSet<General_Category_Values> all = EnumSet.allOf(General_Category_Values.class);
        all.removeAll(PropertyValueSets.CONTROL);
        all.removeAll(PropertyValueSets.LETTER);
        all.removeAll(PropertyValueSets.MARK);
        all.removeAll(PropertyValueSets.NUMBER);
        all.removeAll(PropertyValueSets.PUNCTUATION);
        all.removeAll(PropertyValueSets.SEPARATOR);
        all.removeAll(PropertyValueSets.SYMBOL);
        all.removeAll(
                EnumSet.of(
                        General_Category_Values.Other,
                        General_Category_Values.Letter,
                        General_Category_Values.Cased_Letter,
                        General_Category_Values.Mark,
                        General_Category_Values.Number,
                        General_Category_Values.Punctuation,
                        General_Category_Values.Separator,
                        General_Category_Values.Symbol));
        assertEquals("", Collections.EMPTY_SET, all);
    }

    @Test
    public void TestNames() {
        for (Binary value : Binary.values()) {
            PropertyNames<Binary> propNames = value.getNames();
            for (String name : propNames.getAllNames()) {
                assertEquals("", value, Binary.forName(name));
            }
        }
        for (Line_Break_Values value : Line_Break_Values.values()) {
            PropertyNames<Line_Break_Values> propValueNames = value.getNames();
            for (String name : propValueNames.getAllNames()) {
                assertEquals(name, value, Line_Break_Values.forName(name));
            }
        }
    }

    @Disabled("Broken")
    @Test
    public void TestAAEmoji() {
        EmojiData emojiData = EmojiData.EMOJI_DATA;
        {
            UnicodeMap<Binary> emoji = iup.loadEnum(UcdProperty.Emoji, Binary.class);
            assertSameContents(
                    "Emoji", emojiData.getSingletonsWithoutDefectives(), emoji.getSet(Binary.Yes));
        }
        {
            UnicodeMap<Binary> presentation =
                    iup.loadEnum(UcdProperty.Emoji_Presentation, Binary.class);
            assertSameContents(
                    "Emoji_Presentation",
                    emojiData.getEmojiPresentationSet(),
                    presentation.getSet(Binary.Yes));
        }
        {
            UnicodeMap<Binary> modifiers = iup.loadEnum(UcdProperty.Emoji_Modifier, Binary.class);
            assertSameContents("Emoji_Modifier", EmojiData.MODIFIERS, modifiers.getSet(Binary.Yes));
        }
        {
            UnicodeMap<Binary> bases = iup.loadEnum(UcdProperty.Emoji_Modifier_Base, Binary.class);
            assertSameContents(
                    "Emoji_Modifier_Base", emojiData.getModifierBases(), bases.getSet(Binary.Yes));
        }
    }

    private void assertSameContents(String string, UnicodeSet a, UnicodeSet b) {
        if (!a.equals(b)) {
            assertEquals(
                    string + " (missing)", "[]", new UnicodeSet(a).removeAll(b).toPattern(false));
            assertEquals(
                    string + " (extra)", "[]", new UnicodeSet(b).removeAll(a).toPattern(false));
        } else {
            logln(string + " OK:\t" + a.toPattern(false));
        }
    }

    private <T> void showByValue(
            UcdProperty prop, UnicodeMap<T> emojiStyle, ValueCardinality cardinality) {
        TreeSet<T> sorted =
                cardinality == ValueCardinality.Singleton
                        ? new TreeSet<T>()
                        : new TreeSet<T>(new SetComparator());
        sorted.addAll(emojiStyle.values());
        for (T value : sorted) {
            if (value == Binary.No) {
                continue;
            }
            UnicodeSet us = emojiStyle.getSet(value);
            logln("\t" + value + ":\t" + us.size() + "\t" + us.toPattern(false));
        }
    }

    //    public static <T extends Comparable, U extends Set<T>> int compare(U o1, U o2) {
    //        int diff = o1.size() - o2.size();
    //        if (diff != 0) {
    //            return diff;
    //        }
    //        Collection<T> x1 = SortedSet.class.isInstance(o1) ? o1 : new TreeSet<T>(o1);
    //        Collection<T> x2 = SortedSet.class.isInstance(o2) ? o2 : new TreeSet<T>(o2);
    //        return CollectionUtilities.compare(x1, x2);
    //    }

    public static class SetComparator<T extends Comparable> implements Comparator<Set<T>> {
        public int compare(Set<T> o1, Set<T> o2) {
            return CollectionUtilities.compare((Collection<T>) o1, (Collection<T>) o2);
        }
    }
    ;

    @Test
    public void TestAAScripts() {
        UnicodeMap<String> scriptInfo = iup.load(UcdProperty.Script);
        UnicodeSet unknownScript =
                scriptInfo.getSet(UcdPropertyValues.Script_Values.Unknown.toString());
        unknownScript
                .removeAll(
                        generalCategory.getSet(
                                UcdPropertyValues.General_Category_Values.Unassigned.toString()))
                .removeAll(
                        generalCategory.getSet(
                                UcdPropertyValues.General_Category_Values.Private_Use.toString()))
                .removeAll(
                        generalCategory.getSet(
                                UcdPropertyValues.General_Category_Values.Surrogate.toString()));
        UnicodeSet unknownMarks =
                new UnicodeSet(
                                generalCategory.getSet(
                                        UcdPropertyValues.General_Category_Values.Nonspacing_Mark
                                                .toString()))
                        .addAll(
                                generalCategory.getSet(
                                        UcdPropertyValues.General_Category_Values.Enclosing_Mark
                                                .toString()))
                        .addAll(
                                generalCategory.getSet(
                                        UcdPropertyValues.General_Category_Values.Spacing_Mark
                                                .toString()))
                        .retainAll(unknownScript);
        unknownScript.removeAll(unknownMarks);
        assertEquals("Missing Inherited", UnicodeSet.EMPTY, unknownMarks);
        assertEquals("Missing Common", UnicodeSet.EMPTY, unknownScript);
        for (UnicodeSetIterator it = new UnicodeSetIterator(unknownScript); it.nextRange(); ) {
            logln(
                    Utility.hex(it.codepoint)
                            + ".."
                            + Utility.hex(it.codepointEnd)
                            + "; Common # ("
                            + generalCategory.get(it.codepoint)
                            + ".."
                            + generalCategory.get(it.codepointEnd)
                            + ") "
                            + nameMap.get(it.codepoint)
                            + ".."
                            + nameMap.get(it.codepointEnd));
        }
    }

    @Test
    public void TestJoiningGroupConsistency() {
        // TODO(egg): I would like to be able to put that in the invariants tests as « the partition
        // defined by Joining_Group is finer than that defined by Joining_Type ».
        UnicodeMap<String> joiningGroup = iup.load(UcdProperty.Joining_Group);
        UnicodeMap<String> joiningType = iup.load(UcdProperty.Joining_Type);
        var charactersByJoiningGroup = new HashMap<String, UnicodeSet>();
        joiningGroup.addInverseTo(charactersByJoiningGroup).remove("No_Joining_Group");
        charactersByJoiningGroup.forEach(
                (group, set) -> {
                    final int first = set.getRangeStart(0);
                    final String firstType = joiningType.get(first);
                    set.forEach(
                            (c) -> {
                                assertEquals(
                                        "U+"
                                                + getCodeAndName(Character.toString(first))
                                                + "\nand\nU+"
                                                + getCodeAndName(c)
                                                + "\nhave different joining types but are in the"
                                                + " same joining group ("
                                                + group
                                                + ")\n",
                                        firstType,
                                        joiningType.get(c));
                            });
                });
    }

    @Test
    public void TestScripts() {

        logln("New chars: " + newChars.size());
        {
            LinkedHashSet values = new LinkedHashSet(Arrays.asList(Script_Values.values()));
            values.remove(Script_Values.Unknown);
            values.remove(Script_Values.Katakana_Or_Hiragana);
            listValues(
                    UcdProperty.Script,
                    values,
                    new Transform<Script_Values, String>() {
                        @Override
                        public String transform(Script_Values source) {
                            return source.getShortName();
                        }
                    });
        }
        {
            LinkedHashSet values =
                    new LinkedHashSet(Arrays.asList(General_Category_Values.values()));
            listValues(
                    UcdProperty.General_Category,
                    values,
                    new Transform<General_Category_Values, String>() {
                        @Override
                        public String transform(General_Category_Values source) {
                            return source.getShortName();
                        }
                    });
        }
    }

    public <T extends Enum<T>> void listValues(
            UcdProperty ucdProperty, Collection<T> values, Transform<T, String> transform) {
        UnicodeMap<String> scripts = iup.load(ucdProperty);
        UnicodeMap<String> oldScripts = lastVersion.load(ucdProperty);

        Counter<T> newScriptCounts = new Counter<T>();
        Counter<T> oldScriptCounts = new Counter<T>();
        for (T s : values) {
            String name = s.name();
            UnicodeSet set = scripts.getSet(name);
            if (set.size() == 0) {
                continue;
            }
            UnicodeSet newSet = new UnicodeSet(set).retainAll(newChars);
            int oldSize = set.size() - newSet.size();
            if (oldSize > 0) {
                oldScriptCounts.add(s, oldSize);
            }
            if (newSet.size() > 0) {
                newScriptCounts.add(s, newSet.size());
            }
        }
        logln("#counts");
        LinkedHashSet<T> sorted = new LinkedHashSet(newScriptCounts.getKeysetSortedByCount(false));
        sorted.addAll(oldScriptCounts.getKeysetSortedByCount(false));
        NumberFormat nf = NumberFormat.getInstance();
        for (T c : sorted) {
            logln(
                    nf.format(oldScriptCounts.get(c))
                            + "\t"
                            + nf.format(newScriptCounts.get(c))
                            + "\t"
                            + transform.transform(c)
                            + "\t"
                            + c);
        }
    }

    public HashMap<String, String> getSkeletonMap(
            Collection<String> collection, boolean skeletonToNormal) {
        HashMap<String, String> capNewScripts = new HashMap<String, String>();
        for (String normal : collection) {
            String skeleton = normal.toUpperCase(Locale.ENGLISH).replace("_", "");
            if (skeletonToNormal) {
                capNewScripts.put(skeleton, normal);
            } else {
                capNewScripts.put(normal, skeleton);
            }
        }
        return capNewScripts;
    }

    private void showValues(UnicodeSet us) {
        for (UnicodeSetIterator it = new UnicodeSetIterator(us); it.nextRange(); ) {
            int start = it.codepoint;
            int end = it.codepointEnd;
            logln(
                    Utility.hex(start)
                            + (start == end ? "" : ".." + Utility.hex(end))
                            + "\t#\t"
                            + newName.get(start)
                            + (start == end ? "" : ".." + newName.get(end)));
        }
    }

    private <T> void showValues(UnicodeMap<T> us) {
        Iterable<EntryRange<T>> ers = us.entryRanges();
        for (EntryRange<T> it : ers) {
            if (it.value == null) {
                continue;
            }
            int start = it.codepoint;
            int end = it.codepointEnd;
            logln(
                    Utility.hex(start)
                            + (start == end ? "" : ".." + Utility.hex(end))
                            + " ;\t"
                            + it.value
                            + "\t#\t"
                            + newName.get(start)
                            + (start == end ? "" : ".." + newName.get(end)));
        }
    }

    @Test
    public void TestIdn() {
        show(UcdProperty.Idn_Status);
        show(UcdProperty.Idn_2008);
        show(UcdProperty.Idn_Mapping);
    }

    @Test
    public void TestIdmod() {
        show(UcdProperty.Identifier_Status);
        show(UcdProperty.Identifier_Type);
        show(UcdProperty.Confusable_MA);
    }

    static class ExemplarExceptions {
        static final Map<String, ExemplarExceptions> exemplarExceptions = new HashMap<>();
        UnicodeSet additions = new UnicodeSet();
        UnicodeSet subtractions = new UnicodeSet();

        ExemplarExceptions add(String additions) {
            if (additions != null) {
                this.additions.addAll(new UnicodeSet(additions));
            }
            return this;
        }

        ExemplarExceptions remove(String subtractions) {
            if (subtractions != null) {
                this.subtractions.addAll(subtractions);
            }
            return this;
        }

        static ExemplarExceptions get(String locale) {
            ExemplarExceptions ee = exemplarExceptions.get(locale);
            if (ee == null) {
                exemplarExceptions.put(locale, ee = new ExemplarExceptions());
            }
            return ee;
        }

        public static void add(String locale, String chars) {
            ExemplarExceptions.get(locale).add(chars);
        }

        public static void remove(String locale, String chars) {
            ExemplarExceptions.get(locale).remove(chars);
        }

        static {
            add("en", "[0-9]"); // good enough
            add("ar", "[٠-٩]"); // arab
            add("fa", "[۰-۹]"); // arabext
            add("ks", "[۰-۹]"); // arabext
            add("pa_Arab", "[۰-۹]"); // arabext
            add("ps", "[۰-۹]"); // arabext
            add("ur_IN", "[۰-۹]"); // arabext
            add("uz_Arab", "[۰-۹]"); // arabext
            add("as", "[০-৯]"); // beng
            add("bn", "[০-৯]"); // beng
            add("mr", "[०-९]"); // deva
            add("ne", "[०-९]"); // deva
            add("my", "[၀-၉]"); // mymr
            add("dz", "[༠-༩]"); // tibt
            remove("ks", "[ٖٗٚٛٮ۪ۭ]");
            remove("kn", "[ೞ]");
            remove("km", "[់-៑]");
            remove("si", "[ෟ]");
        }
    }

    public String getCodeAndName(String cp) {
        return Utility.hex(cp) + " (" + cp + ") " + nameMap.get(cp);
    }

    private UnicodeMap<String> show(UcdProperty ucdProperty) {
        UnicodeMap<String> propMap = iup.load(ucdProperty);
        int count = 0;
        for (String value : propMap.values()) {
            if (++count > 50) {
                logln("...");
                break;
            }
            UnicodeSet set = propMap.getSet(value);
            logln(ucdProperty + "\t" + value + "\t" + set);
        }
        return propMap;
    }

    @Test
    public void TestValues() {
        for (final UcdProperty prop : UcdProperty.values()) {
            logln(prop + "\t" + prop.getNames() + "\t" + prop.getEnums());
            //            Collection<Enum> values = PropertyValues.valuesOf(prop);
            //            logln("values: " + values);
        }
        for (final UcdPropertyValues.General_Category_Values prop :
                UcdPropertyValues.General_Category_Values.values()) {
            logln(prop + "\t" + prop.getNames());
            //            Collection<Enum> values = PropertyValues.valuesOf(prop);
            //            logln("values: " + values);
        }

        final UcdPropertyValues.General_Category_Values q =
                UcdPropertyValues.General_Category_Values.Unassigned;
        logln(q.getNames().toString());

        //        Enum x = PropertyValues.forValueName(UcdProperty.General_Category, "Cc");
        //        //Bidi_Mirrored_Values y = Properties.Bidi_Mirrored_Values.No;
        //        Enum z = PropertyValues.forValueName(UcdProperty.Bidi_Mirrored, "N");
        //        Enum w = PropertyValues.forValueName(UcdProperty.General_Category, "Cc");
        //        logln(x + " " + z + " " + w);
    }

    @Test
    public void TestDefaults() {
        assertEquals(
                "Wrong CCC for U+FFFF",
                "Not_Reordered",
                iup.getProperty(UcdProperty.Canonical_Combining_Class).getValue('\uFFFF'));
        assertEquals(
                "Wrong Simple_Lowercase_Mapping for a",
                "a",
                iup.getProperty(UcdProperty.Simple_Lowercase_Mapping).getValue('a'));
        assertEquals(
                "Wrong Simple_Uppercase_Mapping for A",
                "A",
                iup.getProperty(UcdProperty.Simple_Uppercase_Mapping).getValue('A'));
        assertEquals(
                "Wrong Case_Folding for a",
                "a",
                iup.getProperty(UcdProperty.Case_Folding).getValue('a'));
        assertEquals(
                "Wrong Simple_Case_Folding for a",
                "a",
                iup.getProperty(UcdProperty.Simple_Case_Folding).getValue('a'));
        assertEquals(
                "Wrong Lowercase_Mapping for a",
                "a",
                iup.getProperty(UcdProperty.Lowercase_Mapping).getValue('a'));
        assertEquals(
                "Wrong Uppercase_Mapping for a",
                "A",
                iup.getProperty(UcdProperty.Uppercase_Mapping).getValue('a'));
        assertEquals(
                "Wrong Titlecase_Mapping for a",
                "A",
                iup.getProperty(UcdProperty.Titlecase_Mapping).getValue('a'));

        for (var property : UcdProperty.values()) {
            if (property.getType() != PropertyType.Miscellaneous
                    && IndexUnicodeProperties.getResolvedDefaultValueType(property)
                            != DefaultValueType.NONE) {
                assertNotNull(
                        "Null "
                                + property.name()
                                + " for U+FFFF but property is "
                                + property.getType()
                                + " with default value type "
                                + IndexUnicodeProperties.getResolvedDefaultValueType(property)
                                + ". Add an @missing line to ExtraPropertyValueAliases.txt if needed.",
                        iup.getProperty(property).getValue('\uFFFF'));
            }
        }
    }

    @Test
    public void TestCOBOL() {
        final var set = new UnicodeSet();
        // $set = ""; cat 'C:\Users\robin\Desktop\cobol start.txt' | where { $_ -notmatch '[©:]' } | % { $set += ($_ -replace ',',');set.add(' -replace '-',',0x' -replace '^| +',');set.add(0x') }; $set -replace 'set.add\(\);',''
        set.add(0x0030,0x0039);set.add(0x1E900,0x1E943);set.add(0x1E94B);set.add(0x11700,0x1171A);set.add(0x14400,0x14646);set.add(0x0620,0x063F);set.add(0x0641,0x064A);set.add(0x066E,0x066F);set.add(0x0671,0x06D3);set.add(0x06D5);set.add(0x06E5,0x06E6);set.add(0x06EE,0x06EF);set.add(0x06FA,0x06FC);set.add(0x06FF);set.add(0x0750,0x077F);set.add(0x08A0,0x08B4);set.add(0x08B6,0x08C7);set.add(0xFB50,0xFBB1);set.add(0xFBD3,0xFC5D);set.add(0xFC64,0xFD3D);set.add(0xFD50,0xFD8F);set.add(0xFD92,0xFDC7);set.add(0xFDF0,0xFDF9);set.add(0xFE71);set.add(0xFE73);set.add(0xFE77);set.add(0xFE79);set.add(0xFE7B);set.add(0xFE7D);set.add(0xFE7F,0xFEFC);set.add(0x1EE00,0x1EE03);set.add(0x1EE05,0x1EE1F);set.add(0x1EE21,0x1EE22);set.add(0x1EE24);set.add(0x1EE27);set.add(0x1EE29,0x1EE32);set.add(0x1EE34,0x1EE37);set.add(0x1EE39);set.add(0x1EE3B);set.add(0x1EE42);set.add(0x1EE47);set.add(0x1EE49);set.add(0x1EE4B);set.add(0x1EE4D,0x1EE4F);set.add(0x1EE51,0x1EE52);set.add(0x1EE54);set.add(0x1EE57);set.add(0x1EE59);set.add(0x1EE5B);set.add(0x1EE5D);set.add(0x1EE5F);set.add(0x1EE61,0x1EE62);set.add(0x1EE64);set.add(0x1EE67,0x1EE6A);set.add(0x1EE6C,0x1EE72);set.add(0x1EE74,0x1EE77);set.add(0x1EE79,0x1EE7C);set.add(0x1EE7E);set.add(0x1EE80,0x1EE89);set.add(0x1EE8B,0x1EE9B);set.add(0x1EEA1,0x1EEA3);set.add(0x1EEA5,0x1EEA9);set.add(0x1EEAB,0x1EEBB);set.add(0x0531,0x0556);set.add(0x0559);set.add(0x0560,0x0588);set.add(0xFB13,0xFB17);set.add(0x10B00,0x10B35);set.add(0x1B05,0x1B33);set.add(0x1B45,0x1B4B);set.add(0xA6A0,0xA6EF);set.add(0x16800,0x16A38);set.add(0x16AD0,0x16AED);set.add(0x1BC0,0x1BE5);set.add(0x0980);set.add(0x0985,0x098C);set.add(0x098F,0x0990);set.add(0x0993,0x09A8);set.add(0x09AA,0x09B0);set.add(0x09B2);set.add(0x09B6,0x09B9);set.add(0x09BD);set.add(0x09CE);set.add(0x09DC,0x09DD);set.add(0x09DF,0x09E1);set.add(0x09F0,0x09F1);set.add(0x09FC);set.add(0x11C00,0x11C08);set.add(0x11C0A,0x11C2E);set.add(0x11C40);set.add(0x3105,0x312F);set.add(0x31A0,0x31BF);set.add(0x11003,0x11037);set.add(0x1A00,0x1A16);set.add(0x1740,0x1751);set.add(0x1401,0x166C);set.add(0x166F,0x167F);set.add(0x18B0,0x18F5);set.add(0x102A0,0x102D0);set.add(0x10530,0x10563);set.add(0x11103,0x11126);set.add(0x11144);set.add(0x11147);set.add(0xAA00,0xAA28);set.add(0xAA40,0xAA42);set.add(0xAA44,0xAA4B);set.add(0x13A0,0x13F5);set.add(0x13F8,0x13FD);set.add(0xAB70,0xABBF);set.add(0x10FB0,0x10FC4);set.add(0x00B5);set.add(0x02B9,0x02C1);set.add(0x02C6,0x02D1);set.add(0x02EC);set.add(0x02EE);set.add(0x0374);set.add(0x0640);set.add(0x1CE9,0x1CEC);set.add(0x1CEE,0x1CF3);set.add(0x1CF5,0x1CF6);set.add(0x1CFA);set.add(0x2102);set.add(0x2107);set.add(0x210A,0x2113);set.add(0x2115);set.add(0x2118,0x211D);set.add(0x2124);set.add(0x2128);set.add(0x212C,0x2131);set.add(0x2133,0x2139);set.add(0x213C,0x213F);set.add(0x2145,0x2149);set.add(0x3006);set.add(0x3031,0x3035);set.add(0x303C);set.add(0x30FC);set.add(0xA717,0xA71F);set.add(0xA788);set.add(0xA9CF);set.add(0xFF70);set.add(0x16FE3);set.add(0x1D400,0x1D454);set.add(0x1D456,0x1D49C);set.add(0x1D49E,0x1D49F);set.add(0x1D4A2);set.add(0x1D4A5,0x1D4A6);set.add(0x1D4A9,0x1D4AC);set.add(0x1D4AE,0x1D4B9);set.add(0x1D4BB);set.add(0x1D4BD,0x1D4C3);set.add(0x1D4C5,0x1D505);set.add(0x1D507,0x1D50A);set.add(0x1D50D,0x1D514);set.add(0x1D516,0x1D51C);set.add(0x1D51E,0x1D539);set.add(0x1D53B,0x1D53E);set.add(0x1D540,0x1D544);set.add(0x1D546);set.add(0x1D54A,0x1D550);set.add(0x1D552,0x1D6A5);set.add(0x1D6A8,0x1D6C0);set.add(0x1D6C2,0x1D6DA);set.add(0x1D6DC,0x1D6FA);set.add(0x1D6FC,0x1D714);set.add(0x1D716,0x1D734);set.add(0x1D736,0x1D74E);set.add(0x1D750,0x1D76E);set.add(0x1D770,0x1D788);set.add(0x1D78A,0x1D7A8);set.add(0x1D7AA,0x1D7C2);set.add(0x1D7C4,0x1D7CB);set.add(0x03E2,0x03EF);set.add(0x2C80,0x2CE4);set.add(0x2CEB,0x2CEE);set.add(0x2CF2,0x2CF3);set.add(0x12000,0x12399);set.add(0x12400,0x1246E);set.add(0x12480,0x12543);set.add(0x10800,0x10805);set.add(0x10808);set.add(0x1080A,0x10835);set.add(0x10837,0x10838);set.add(0x1083C);set.add(0x1083F);set.add(0x0400,0x0481);set.add(0x048A,0x052F);set.add(0x1C80,0x1C88);set.add(0x1D2B);set.add(0x1D78);set.add(0xA640,0xA66E);set.add(0xA67F,0xA69D);set.add(0x10400,0x1044F);set.add(0x0904,0x0939);set.add(0x093D);set.add(0x0950);set.add(0x0958,0x0961);set.add(0x0971,0x097F);set.add(0xA8F2,0xA8F7);set.add(0xA8FB);set.add(0xA8FD,0xA8FE);set.add(0x11900,0x11906);set.add(0x11909);set.add(0x1190C,0x11913);set.add(0x11915,0x11916);set.add(0x11918,0x1192F);set.add(0x1193F);set.add(0x11941);set.add(0x11800,0x1182B);set.add(0x1BC00,0x1BC6A);set.add(0x1BC70,0x1BC7C);set.add(0x1BC80,0x1BC88);set.add(0x1BC90,0x1BC99);set.add(0x13000,0x1342E);set.add(0x10500,0x10527);set.add(0x10FE0,0x10FF6);set.add(0x1200,0x1248);set.add(0x124A,0x124D);set.add(0x1250,0x1256);set.add(0x1258);set.add(0x125A,0x125D);set.add(0x1260,0x1288);set.add(0x128A,0x128D);set.add(0x1290,0x12B0);set.add(0x12B2,0x12B5);set.add(0x12B8,0x12BE);set.add(0x12C0);set.add(0x12C2,0x12C5);set.add(0x12C8,0x12D6);set.add(0x12D8,0x1310);set.add(0x1312,0x1315);set.add(0x1318,0x135A);set.add(0x1380,0x138F);set.add(0x2D80,0x2D96);set.add(0x2DA0,0x2DA6);set.add(0x2DA8,0x2DAE);set.add(0x2DB0,0x2DB6);set.add(0x2DB8,0x2DBE);set.add(0x2DC0,0x2DC6);set.add(0x2DC8,0x2DCE);set.add(0x2DD0,0x2DD6);set.add(0x2DD8,0x2DDE);set.add(0xAB01,0xAB06);set.add(0xAB09,0xAB0E);set.add(0xAB11,0xAB16);set.add(0xAB20,0xAB26);set.add(0xAB28,0xAB2E);set.add(0x10A0,0x10C5);set.add(0x10C7);set.add(0x10CD);set.add(0x10D0,0x10FA);set.add(0x10FC,0x10FF);set.add(0x1C90,0x1CBA);set.add(0x1CBD,0x1CBF);set.add(0x2D00,0x2D25);set.add(0x2D27);set.add(0x2D2D);set.add(0x2C00,0x2C2E);set.add(0x2C30,0x2C5E);set.add(0x10330,0x1034A);set.add(0x11305,0x1130C);set.add(0x1130F,0x11310);set.add(0x11313,0x11328);set.add(0x1132A,0x11330);set.add(0x11332,0x11333);set.add(0x11335,0x11339);set.add(0x1133D);set.add(0x11350);set.add(0x1135D,0x11361);set.add(0x0370,0x0373);set.add(0x0376,0x0377);set.add(0x037B,0x037D);set.add(0x037F);set.add(0x0386);set.add(0x0388,0x038A);set.add(0x038C);set.add(0x038E,0x03A1);set.add(0x03A3,0x03E1);set.add(0x03F0,0x03F5);set.add(0x03F7,0x03FF);set.add(0x1D26,0x1D2A);set.add(0x1D5D,0x1D61);set.add(0x1D66,0x1D6A);set.add(0x1DBF);set.add(0x1F00,0x1F15);set.add(0x1F18,0x1F1D);set.add(0x1F20,0x1F45);set.add(0x1F48,0x1F4D);set.add(0x1F50,0x1F57);set.add(0x1F59);set.add(0x1F5B);set.add(0x1F5D);set.add(0x1F5F,0x1F7D);set.add(0x1F80,0x1FB4);set.add(0x1FB6,0x1FBC);set.add(0x1FBE);set.add(0x1FC2,0x1FC4);set.add(0x1FC6,0x1FCC);set.add(0x1FD0,0x1FD3);set.add(0x1FD6,0x1FDB);set.add(0x1FE0,0x1FEC);set.add(0x1FF2,0x1FF4);set.add(0x1FF6,0x1FFC);set.add(0x2126);set.add(0xAB65);set.add(0x10140,0x10174);set.add(0x0A85,0x0A8D);set.add(0x0A8F,0x0A91);set.add(0x0A93,0x0AA8);set.add(0x0AAA,0x0AB0);set.add(0x0AB2,0x0AB3);set.add(0x0AB5,0x0AB9);set.add(0x0ABD);set.add(0x0AD0);set.add(0x0AE0,0x0AE1);set.add(0x0AF9);set.add(0x11D60,0x11D65);set.add(0x11D67,0x11D68);set.add(0x11D6A,0x11D89);set.add(0x11D98);set.add(0x0A05,0x0A0A);set.add(0x0A0F,0x0A10);set.add(0x0A13,0x0A28);set.add(0x0A2A,0x0A30);set.add(0x0A32,0x0A33);set.add(0x0A35,0x0A36);set.add(0x0A38,0x0A39);set.add(0x0A59,0x0A5C);set.add(0x0A5E);set.add(0x0A72,0x0A74);set.add(0x3005);set.add(0x3007);set.add(0x3021,0x3029);set.add(0x3038,0x303B);set.add(0x3400,0x4DBF);set.add(0x4E00,0x9FFC);set.add(0xF900,0xFA6D);set.add(0xFA70,0xFAD9);set.add(0x20000,0x2A6DD);set.add(0x2A700,0x2B734);set.add(0x2B740,0x2B81D);set.add(0x2B820,0x2CEA1);set.add(0x2CEB0,0x2EBE0);set.add(0x2F800,0x2FA1D);set.add(0x30000,0x3134A);set.add(0x1100,0x11FF);set.add(0x3131,0x318E);set.add(0xA960,0xA97C);set.add(0xAC00,0xD7A3);set.add(0xD7B0,0xD7C6);set.add(0xD7CB,0xD7FB);set.add(0xFFA0,0xFFBE);set.add(0xFFC2,0xFFC7);set.add(0xFFCA,0xFFCF);set.add(0xFFD2,0xFFD7);set.add(0xFFDA,0xFFDC);set.add(0x10D00,0x10D23);set.add(0x1720,0x1731);set.add(0x108E0,0x108F2);set.add(0x108F4,0x108F5);set.add(0x05D0,0x05EA);set.add(0x05EF,0x05F2);set.add(0xFB1D);set.add(0xFB1F,0xFB28);set.add(0xFB2A,0xFB36);set.add(0xFB38,0xFB3C);set.add(0xFB3E);set.add(0xFB40,0xFB41);set.add(0xFB43,0xFB44);set.add(0xFB46,0xFB4F);set.add(0x3041,0x3096);set.add(0x309D,0x309F);set.add(0x1B001,0x1B11E);set.add(0x1B150,0x1B152);set.add(0x10840,0x10855);set.add(0x10B60,0x10B72);set.add(0x10B40,0x10B55);set.add(0xA984,0xA9B2);set.add(0x11083,0x110AF);set.add(0x0C80);set.add(0x0C85,0x0C8C);set.add(0x0C8E,0x0C90);set.add(0x0C92,0x0CA8);set.add(0x0CAA,0x0CB3);set.add(0x0CB5,0x0CB9);set.add(0x0CBD);set.add(0x0CDE);set.add(0x0CE0,0x0CE1);set.add(0x0CF1,0x0CF2);set.add(0x30A1,0x30FA);set.add(0x30FD,0x30FF);set.add(0x31F0,0x31FF);set.add(0xFF66,0xFF6F);set.add(0xFF71,0xFF9D);set.add(0x1B000);set.add(0x1B164,0x1B167);set.add(0xA90A,0xA925);set.add(0x10A00);set.add(0x10A10,0x10A13);set.add(0x10A15,0x10A17);set.add(0x10A19,0x10A35);set.add(0x18B00,0x18CD5);set.add(0x1780,0x17B3);set.add(0x17D7);set.add(0x17DC);set.add(0x11200,0x11211);set.add(0x11213,0x1122B);set.add(0x112B0,0x112DE);set.add(0x0E81,0x0E82);set.add(0x0E84);set.add(0x0E86,0x0E8A);set.add(0x0E8C,0x0EA3);set.add(0x0EA5);set.add(0x0EA7,0x0EB0);set.add(0x0EB2);set.add(0x0EBD);set.add(0x0EC0,0x0EC4);set.add(0x0EC6);set.add(0x0EDC,0x0EDF);set.add(0x0041,0x005A);set.add(0x0061,0x007A);set.add(0x00AA);set.add(0x00BA);set.add(0x00C0,0x00D6);set.add(0x00D8,0x00F6);set.add(0x00F8,0x02B8);set.add(0x02E0,0x02E4);set.add(0x1D00,0x1D25);set.add(0x1D2C,0x1D5C);set.add(0x1D62,0x1D65);set.add(0x1D6B,0x1D77);set.add(0x1D79,0x1DBE);set.add(0x1E00,0x1EFF);set.add(0x2071);set.add(0x207F);set.add(0x2090,0x209C);set.add(0x212A,0x212B);set.add(0x2132);set.add(0x214E);set.add(0x2160,0x2188);set.add(0x2C60,0x2C7F);set.add(0xA722,0xA787);set.add(0xA78B,0xA7BF);set.add(0xA7C2,0xA7CA);set.add(0xA7F5,0xA7FF);set.add(0xAB30,0xAB5A);set.add(0xAB5C,0xAB64);set.add(0xAB66,0xAB69);set.add(0xFB00,0xFB06);set.add(0xFF21,0xFF3A);set.add(0xFF41,0xFF5A);set.add(0x1C00,0x1C23);set.add(0x1C4D,0x1C4F);set.add(0x1900,0x191E);set.add(0x10600,0x10736);set.add(0x10740,0x10755);set.add(0x10760,0x10767);set.add(0x10000,0x1000B);set.add(0x1000D,0x10026);set.add(0x10028,0x1003A);set.add(0x1003C,0x1003D);set.add(0x1003F,0x1004D);set.add(0x10050,0x1005D);set.add(0x10080,0x100FA);set.add(0xA4D0,0xA4FD);set.add(0x11FB0);set.add(0x10280,0x1029C);set.add(0x10920,0x10939);set.add(0x11150,0x11172);set.add(0x11176);set.add(0x11EE0,0x11EF2);set.add(0x0D04,0x0D0C);set.add(0x0D0E,0x0D10);set.add(0x0D12,0x0D3A);set.add(0x0D3D);set.add(0x0D4E);set.add(0x0D54,0x0D56);set.add(0x0D5F,0x0D61);set.add(0x0D7A,0x0D7F);set.add(0x0840,0x0858);set.add(0x10AC0,0x10AC7);set.add(0x10AC9,0x10AE4);set.add(0x11C72,0x11C8F);set.add(0x11D00,0x11D06);set.add(0x11D08,0x11D09);set.add(0x11D0B,0x11D30);set.add(0x11D46);set.add(0x16E40,0x16E7F);set.add(0xAAE0,0xAAEA);set.add(0xAAF2,0xAAF4);set.add(0xABC0,0xABE2);set.add(0x1E800,0x1E8C4);set.add(0x109A0,0x109B7);set.add(0x109BE,0x109BF);set.add(0x10980,0x1099F);set.add(0x16F00,0x16F4A);set.add(0x16F50);set.add(0x16F93,0x16F9F);set.add(0x11600,0x1162F);set.add(0x11644);set.add(0x1820,0x1878);set.add(0x1880,0x18A8);set.add(0x18AA);set.add(0x16A40,0x16A5E);set.add(0x11280,0x11286);set.add(0x11288);set.add(0x1128A,0x1128D);set.add(0x1128F,0x1129D);set.add(0x1129F,0x112A8);set.add(0x1000,0x102A);set.add(0x103F);set.add(0x1050,0x1055);set.add(0x105A,0x105D);set.add(0x1061);set.add(0x1065,0x1066);set.add(0x106E,0x1070);set.add(0x1075,0x1081);set.add(0x108E);set.add(0xA9E0,0xA9E4);set.add(0xA9E6,0xA9EF);set.add(0xA9FA,0xA9FE);set.add(0xAA60,0xAA76);set.add(0xAA7A);set.add(0xAA7E,0xAA7F);set.add(0x10880,0x1089E);set.add(0x119A0,0x119A7);set.add(0x119AA,0x119D0);set.add(0x119E1);set.add(0x119E3);set.add(0x1980,0x19AB);set.add(0x19B0,0x19C9);set.add(0x11400,0x11434);set.add(0x11447,0x1144A);set.add(0x1145F,0x11461);set.add(0x07CA,0x07EA);set.add(0x07F4,0x07F5);set.add(0x07FA);set.add(0x16FE1);set.add(0x1B170,0x1B2FB);set.add(0x1E100,0x1E12C);set.add(0x1E137,0x1E13D);set.add(0x1E14E);set.add(0x1681,0x169A);set.add(0x1C5A,0x1C7D);set.add(0x10C80,0x10CB2);set.add(0x10CC0,0x10CF2);set.add(0x10300,0x1031F);set.add(0x1032D,0x1032F);set.add(0x10A80,0x10A9C);set.add(0x10350,0x10375);set.add(0x103A0,0x103C3);set.add(0x103C8,0x103CF);set.add(0x103D1,0x103D5);set.add(0x10F00,0x10F1C);set.add(0x10F27);set.add(0x10A60,0x10A7C);set.add(0x10C00,0x10C48);set.add(0x0B05,0x0B0C);set.add(0x0B0F,0x0B10);set.add(0x0B13,0x0B28);set.add(0x0B2A,0x0B30);set.add(0x0B32,0x0B33);set.add(0x0B35,0x0B39);set.add(0x0B3D);set.add(0x0B5C,0x0B5D);set.add(0x0B5F,0x0B61);set.add(0x0B71);set.add(0x104B0,0x104D3);set.add(0x104D8,0x104FB);set.add(0x10480,0x1049D);set.add(0x16B00,0x16B2F);set.add(0x16B40,0x16B43);set.add(0x16B63,0x16B77);set.add(0x16B7D,0x16B8F);set.add(0x10860,0x10876);set.add(0x11AC0,0x11AF8);set.add(0xA840,0xA873);set.add(0x10900,0x10915);set.add(0x10B80,0x10B91);set.add(0xA930,0xA946);set.add(0x16A0,0x16EA);set.add(0x16EE,0x16F8);set.add(0x0800,0x0815);set.add(0x081A);set.add(0x0824);set.add(0x0828);set.add(0xA882,0xA8B3);set.add(0x11183,0x111B2);set.add(0x111C1,0x111C4);set.add(0x111DA);set.add(0x111DC);set.add(0x10450,0x1047F);set.add(0x11580,0x115AE);set.add(0x115D8,0x115DB);set.add(0x0D85,0x0D96);set.add(0x0D9A,0x0DB1);set.add(0x0DB3,0x0DBB);set.add(0x0DBD);set.add(0x0DC0,0x0DC6);set.add(0x10F30,0x10F45);set.add(0x110D0,0x110E8);set.add(0x11A50);set.add(0x11A5C,0x11A89);set.add(0x11A9D);set.add(0x1B83,0x1BA0);set.add(0x1BAE,0x1BAF);set.add(0x1BBA,0x1BBF);set.add(0xA800,0xA801);set.add(0xA803,0xA805);set.add(0xA807,0xA80A);set.add(0xA80C,0xA822);set.add(0x0710);set.add(0x0712,0x072F);set.add(0x074D,0x074F);set.add(0x0860,0x086A);set.add(0x1700,0x170C);set.add(0x170E,0x1711);set.add(0x1760,0x176C);set.add(0x176E,0x1770);set.add(0x1950,0x196D);set.add(0x1970,0x1974);set.add(0x1A20,0x1A54);set.add(0x1AA7);set.add(0xAA80,0xAAAF);set.add(0xAAB1);set.add(0xAAB5,0xAAB6);set.add(0xAAB9,0xAABD);set.add(0xAAC0);set.add(0xAAC2);set.add(0xAADB,0xAADD);set.add(0x11680,0x116AA);set.add(0x116B8);set.add(0x0B83);set.add(0x0B85,0x0B8A);set.add(0x0B8E,0x0B90);set.add(0x0B92,0x0B95);set.add(0x0B99,0x0B9A);set.add(0x0B9C);set.add(0x0B9E,0x0B9F);set.add(0x0BA3,0x0BA4);set.add(0x0BA8,0x0BAA);set.add(0x0BAE,0x0BB9);set.add(0x0BD0);set.add(0x16FE0);set.add(0x17000,0x187F7);set.add(0x18800,0x18AFF);set.add(0x18D00,0x18D08);set.add(0x0C05,0x0C0C);set.add(0x0C0E,0x0C10);set.add(0x0C12,0x0C28);set.add(0x0C2A,0x0C39);set.add(0x0C3D);set.add(0x0C58,0x0C5A);set.add(0x0C60,0x0C61);set.add(0x0780,0x07A5);set.add(0x07B1);set.add(0x0E01,0x0E30);set.add(0x0E32);set.add(0x0E40,0x0E46);set.add(0x0F00);set.add(0x0F40,0x0F47);set.add(0x0F49,0x0F6C);set.add(0x0F88,0x0F8C);set.add(0x2D30,0x2D67);set.add(0x2D6F);set.add(0x11480,0x114AF);set.add(0x114C4,0x114C5);set.add(0x114C7);set.add(0x10380,0x1039D);set.add(0xA500,0xA60C);set.add(0xA610,0xA61F);set.add(0xA62A,0xA62B);set.add(0x1E2C0,0x1E2EB);set.add(0x118A0,0x118DF);set.add(0x118FF);set.add(0x10E80,0x10EA9);set.add(0x10EB0,0x10EB1);set.add(0xA000,0xA48C);set.add(0x11A00);set.add(0x11A0B,0x11A32);set.add(0x11A3A);
        set.freeze();

        final var set2 = new UnicodeSet();
        set2.add(0x1E944,0x1E94A);set2.add(0x1E950,0x1E959);set2.add(0x1171D,0x1172B);set2.add(0x11730,0x11739);set2.add(0x0610,0x061A);set2.add(0x0656,0x0669);set2.add(0x06D6,0x06DC);set2.add(0x06DF,0x06E4);set2.add(0x06E7,0x06E8);set2.add(0x06EA,0x06ED);set2.add(0x06F0,0x06F9);set2.add(0x08D3,0x08E1);set2.add(0x08E3,0x08FF);set2.add(0x1B00,0x1B04);set2.add(0x1B34,0x1B44);set2.add(0x1B50,0x1B59);set2.add(0x1B6B,0x1B73);set2.add(0xA6F0,0xA6F1);set2.add(0x16AF0,0x16AF4);set2.add(0x1BE6,0x1BF3);set2.add(0x0981,0x0983);set2.add(0x09BC);set2.add(0x09BE,0x09C4);set2.add(0x09C7,0x09C8);set2.add(0x09CB,0x09CD);set2.add(0x09D7);set2.add(0x09E2,0x09E3);set2.add(0x09E6,0x09EF);set2.add(0x09FE);set2.add(0x11C2F,0x11C36);set2.add(0x11C38,0x11C3F);set2.add(0x11C50,0x11C59);set2.add(0x11000,0x11002);set2.add(0x11038,0x11046);set2.add(0x11066,0x1106F);set2.add(0x1107F);set2.add(0x1A17,0x1A1B);set2.add(0x1752,0x1753);set2.add(0x11100,0x11102);set2.add(0x11127,0x11134);set2.add(0x11136,0x1113F);set2.add(0x11145,0x11146);set2.add(0xAA29,0xAA36);set2.add(0xAA43);set2.add(0xAA4C,0xAA4D);set2.add(0xAA50,0xAA59);set2.add(0x00B7);set2.add(0x0387);set2.add(0x1CE1);set2.add(0x1CF7);set2.add(0x203F,0x2040);set2.add(0x2054);set2.add(0xFE33,0xFE34);set2.add(0xFE4D,0xFE4F);set2.add(0xFF10,0xFF19);set2.add(0xFF3F);set2.add(0xFF9E,0xFF9F);set2.add(0x1D165,0x1D166);set2.add(0x1D16D,0x1D172);set2.add(0x1D7CE,0x1D7FF);set2.add(0x1FBF0,0x1FBF9);set2.add(0x2CEF,0x2CF1);set2.add(0x0483,0x0484);set2.add(0x0487);set2.add(0x2DE0,0x2DFF);set2.add(0xA66F);set2.add(0xA674,0xA67D);set2.add(0xA69E,0xA69F);set2.add(0xFE2E,0xFE2F);set2.add(0x0900,0x0903);set2.add(0x093A,0x093C);set2.add(0x093E,0x094F);set2.add(0x0955,0x0957);set2.add(0x0962,0x0963);set2.add(0x0966,0x096F);set2.add(0xA8E0,0xA8F1);set2.add(0xA8FF);set2.add(0x11930,0x11935);set2.add(0x11937,0x11938);set2.add(0x1193B,0x1193E);set2.add(0x11940);set2.add(0x11942,0x11943);set2.add(0x11950,0x11959);set2.add(0x1182C,0x1183A);set2.add(0x1BC9D,0x1BC9E);set2.add(0x135D,0x135F);set2.add(0x1369,0x1371);set2.add(0x1E000,0x1E006);set2.add(0x1E008,0x1E018);set2.add(0x1E01B,0x1E021);set2.add(0x1E023,0x1E024);set2.add(0x1E026,0x1E02A);set2.add(0x11300,0x11303);set2.add(0x1133C);set2.add(0x1133E,0x11344);set2.add(0x11347,0x11348);set2.add(0x1134B,0x1134D);set2.add(0x11357);set2.add(0x11362,0x11363);set2.add(0x11366,0x1136C);set2.add(0x11370,0x11374);set2.add(0x1D242,0x1D244);set2.add(0x0A81,0x0A83);set2.add(0x0ABC);set2.add(0x0ABE,0x0AC5);set2.add(0x0AC7,0x0AC9);set2.add(0x0ACB,0x0ACD);set2.add(0x0AE2,0x0AE3);set2.add(0x0AE6,0x0AEF);set2.add(0x0AFA,0x0AFF);set2.add(0x11D8A,0x11D8E);set2.add(0x11D90,0x11D91);set2.add(0x11D93,0x11D97);set2.add(0x11DA0,0x11DA9);set2.add(0x0A01,0x0A03);set2.add(0x0A3C);set2.add(0x0A3E,0x0A42);set2.add(0x0A47,0x0A48);set2.add(0x0A4B,0x0A4D);set2.add(0x0A51);set2.add(0x0A66,0x0A71);set2.add(0x0A75);set2.add(0x16FF0,0x16FF1);set2.add(0x302E,0x302F);set2.add(0x10D24,0x10D27);set2.add(0x10D30,0x10D39);set2.add(0x1732,0x1734);set2.add(0x0591,0x05BD);set2.add(0x05BF);set2.add(0x05C1,0x05C2);set2.add(0x05C4,0x05C5);set2.add(0x05C7);set2.add(0xFB1E);set2.add(0x0300,0x036F);set2.add(0x0485,0x0486);set2.add(0x064B,0x0655);set2.add(0x0670);set2.add(0x0951,0x0954);set2.add(0x1AB0,0x1ABD);set2.add(0x1ABF,0x1AC0);set2.add(0x1CD0,0x1CD2);set2.add(0x1CD4,0x1CE0);set2.add(0x1CE2,0x1CE8);set2.add(0x1CED);set2.add(0x1CF4);set2.add(0x1CF8,0x1CF9);set2.add(0x1DC0,0x1DF9);set2.add(0x1DFB,0x1DFF);set2.add(0x20D0,0x20DC);set2.add(0x20E1);set2.add(0x20E5,0x20F0);set2.add(0x302A,0x302D);set2.add(0x3099,0x309A);set2.add(0xFE00,0xFE0F);set2.add(0xFE20,0xFE2D);set2.add(0x101FD);set2.add(0x102E0);set2.add(0x1133B);set2.add(0x1D167,0x1D169);set2.add(0x1D17B,0x1D182);set2.add(0x1D185,0x1D18B);set2.add(0x1D1AA,0x1D1AD);set2.add(0xE0100,0xE01EF);set2.add(0xA980,0xA983);set2.add(0xA9B3,0xA9C0);set2.add(0xA9D0,0xA9D9);set2.add(0x11080,0x11082);set2.add(0x110B0,0x110BA);set2.add(0x0C81,0x0C83);set2.add(0x0CBC);set2.add(0x0CBE,0x0CC4);set2.add(0x0CC6,0x0CC8);set2.add(0x0CCA,0x0CCD);set2.add(0x0CD5,0x0CD6);set2.add(0x0CE2,0x0CE3);set2.add(0x0CE6,0x0CEF);set2.add(0xA900,0xA909);set2.add(0xA926,0xA92D);set2.add(0x10A01,0x10A03);set2.add(0x10A05,0x10A06);set2.add(0x10A0C,0x10A0F);set2.add(0x10A38,0x10A3A);set2.add(0x10A3F);set2.add(0x16FE4);set2.add(0x17B4,0x17D3);set2.add(0x17DD);set2.add(0x17E0,0x17E9);set2.add(0x1122C,0x11237);set2.add(0x1123E);set2.add(0x112DF,0x112EA);set2.add(0x112F0,0x112F9);set2.add(0x0EB1);set2.add(0x0EB3,0x0EBC);set2.add(0x0EC8,0x0ECD);set2.add(0x0ED0,0x0ED9);set2.add(0x1C24,0x1C37);set2.add(0x1C40,0x1C49);set2.add(0x1920,0x192B);set2.add(0x1930,0x193B);set2.add(0x1946,0x194F);set2.add(0x11173);set2.add(0x11EF3,0x11EF6);set2.add(0x0D00,0x0D03);set2.add(0x0D3B,0x0D3C);set2.add(0x0D3E,0x0D44);set2.add(0x0D46,0x0D48);set2.add(0x0D4A,0x0D4D);set2.add(0x0D57);set2.add(0x0D62,0x0D63);set2.add(0x0D66,0x0D6F);set2.add(0x0859,0x085B);set2.add(0x10AE5,0x10AE6);set2.add(0x11C92,0x11CA7);set2.add(0x11CA9,0x11CB6);set2.add(0x11D31,0x11D36);set2.add(0x11D3A);set2.add(0x11D3C,0x11D3D);set2.add(0x11D3F,0x11D45);set2.add(0x11D47);set2.add(0x11D50,0x11D59);set2.add(0xAAEB,0xAAEF);set2.add(0xAAF5,0xAAF6);set2.add(0xABE3,0xABEA);set2.add(0xABEC,0xABED);set2.add(0xABF0,0xABF9);set2.add(0x1E8D0,0x1E8D6);set2.add(0x16F4F);set2.add(0x16F51,0x16F87);set2.add(0x16F8F,0x16F92);set2.add(0x11630,0x11640);set2.add(0x11650,0x11659);set2.add(0x180B,0x180D);set2.add(0x1810,0x1819);set2.add(0x18A9);set2.add(0x16A60,0x16A69);set2.add(0x102B,0x103E);set2.add(0x1040,0x1049);set2.add(0x1056,0x1059);set2.add(0x105E,0x1060);set2.add(0x1062,0x1064);set2.add(0x1067,0x106D);set2.add(0x1071,0x1074);set2.add(0x1082,0x108D);set2.add(0x108F,0x109D);set2.add(0xA9E5);set2.add(0xA9F0,0xA9F9);set2.add(0xAA7B,0xAA7D);set2.add(0x119D1,0x119D7);set2.add(0x119DA,0x119E0);set2.add(0x119E4);set2.add(0x19D0,0x19DA);set2.add(0x11435,0x11446);set2.add(0x11450,0x11459);set2.add(0x1145E);set2.add(0x07C0,0x07C9);set2.add(0x07EB,0x07F3);set2.add(0x07FD);set2.add(0x1E130,0x1E136);set2.add(0x1E140,0x1E149);set2.add(0x1C50,0x1C59);set2.add(0x10376,0x1037A);set2.add(0x0B01,0x0B03);set2.add(0x0B3C);set2.add(0x0B3E,0x0B44);set2.add(0x0B47,0x0B48);set2.add(0x0B4B,0x0B4D);set2.add(0x0B55,0x0B57);set2.add(0x0B62,0x0B63);set2.add(0x0B66,0x0B6F);set2.add(0x104A0,0x104A9);set2.add(0x16B30,0x16B36);set2.add(0x16B50,0x16B59);set2.add(0xA947,0xA953);set2.add(0x0816,0x0819);set2.add(0x081B,0x0823);set2.add(0x0825,0x0827);set2.add(0x0829,0x082D);set2.add(0xA880,0xA881);set2.add(0xA8B4,0xA8C5);set2.add(0xA8D0,0xA8D9);set2.add(0x11180,0x11182);set2.add(0x111B3,0x111C0);set2.add(0x111C9,0x111CC);set2.add(0x111CE,0x111D9);set2.add(0x115AF,0x115B5);set2.add(0x115B8,0x115C0);set2.add(0x115DC,0x115DD);set2.add(0x1DA00,0x1DA36);set2.add(0x1DA3B,0x1DA6C);set2.add(0x1DA75);set2.add(0x1DA84);set2.add(0x1DA9B,0x1DA9F);set2.add(0x1DAA1,0x1DAAF);set2.add(0x0D81,0x0D83);set2.add(0x0DCA);set2.add(0x0DCF,0x0DD4);set2.add(0x0DD6);set2.add(0x0DD8,0x0DDF);set2.add(0x0DE6,0x0DEF);set2.add(0x0DF2,0x0DF3);set2.add(0x10F46,0x10F50);set2.add(0x110F0,0x110F9);set2.add(0x11A51,0x11A5B);set2.add(0x11A8A,0x11A99);set2.add(0x1B80,0x1B82);set2.add(0x1BA1,0x1BAD);set2.add(0x1BB0,0x1BB9);set2.add(0xA802);set2.add(0xA806);set2.add(0xA80B);set2.add(0xA823,0xA827);set2.add(0xA82C);set2.add(0x0711);set2.add(0x0730,0x074A);set2.add(0x1712,0x1714);set2.add(0x1772,0x1773);set2.add(0x1A55,0x1A5E);set2.add(0x1A60,0x1A7C);set2.add(0x1A7F,0x1A89);set2.add(0x1A90,0x1A99);set2.add(0xAAB0);set2.add(0xAAB2,0xAAB4);set2.add(0xAAB7,0xAAB8);set2.add(0xAABE,0xAABF);set2.add(0xAAC1);set2.add(0x116AB,0x116B7);set2.add(0x116C0,0x116C9);set2.add(0x0B82);set2.add(0x0BBE,0x0BC2);set2.add(0x0BC6,0x0BC8);set2.add(0x0BCA,0x0BCD);set2.add(0x0BD7);set2.add(0x0BE6,0x0BEF);set2.add(0x0C00,0x0C04);set2.add(0x0C3E,0x0C44);set2.add(0x0C46,0x0C48);set2.add(0x0C4A,0x0C4D);set2.add(0x0C55,0x0C56);set2.add(0x0C62,0x0C63);set2.add(0x0C66,0x0C6F);set2.add(0x07A6,0x07B0);set2.add(0x0E31);set2.add(0x0E33,0x0E3A);set2.add(0x0E47,0x0E4E);set2.add(0x0E50,0x0E59);set2.add(0x0F18,0x0F19);set2.add(0x0F20,0x0F29);set2.add(0x0F35);set2.add(0x0F37);set2.add(0x0F39);set2.add(0x0F3E,0x0F3F);set2.add(0x0F71,0x0F84);set2.add(0x0F86,0x0F87);set2.add(0x0F8D,0x0F97);set2.add(0x0F99,0x0FBC);set2.add(0x0FC6);set2.add(0x2D7F);set2.add(0x114B0,0x114C3);set2.add(0x114D0,0x114D9);set2.add(0xA620,0xA629);set2.add(0x1E2EC,0x1E2F9);set2.add(0x118E0,0x118E9);set2.add(0x10EAB,0x10EAC);set2.add(0x11A01,0x11A0A);set2.add(0x11A33,0x11A39);set2.add(0x11A3B,0x11A3E);set2.add(0x11A47);
        set2.freeze();
        
        final var map = new UnicodeMap<Integer>();
        map.put(0x0041,0x0061);map.put(0x0042,0x0062);map.put(0x0043,0x0063);map.put(0x0044,0x0064);
        map.put(0x0045,0x0065);map.put(0x0046,0x0066);map.put(0x0047,0x0067);map.put(0x0048,0x0068);
        map.put(0x0049,0x0069);map.put(0x004A,0x006A);map.put(0x004B,0x006B);map.put(0x004C,0x006C);
        map.put(0x004D,0x006D);map.put(0x004E,0x006E);map.put(0x004F,0x006F);map.put(0x0050,0x0070);
        map.put(0x0051,0x0071);map.put(0x0052,0x0072);map.put(0x0053,0x0073);map.put(0x0054,0x0074);
        map.put(0x0055,0x0075);map.put(0x0056,0x0076);map.put(0x0057,0x0077);map.put(0x0058,0x0078);
        map.put(0x0059,0x0079);map.put(0x005A,0x007A);map.put(0x00C0,0x00E0);map.put(0x00C1,0x00E1);
        map.put(0x00C2,0x00E2);map.put(0x00C3,0x00E3);map.put(0x00C4,0x00E4);map.put(0x00C5,0x00E5);
        map.put(0x00C6,0x00E6);map.put(0x00C7,0x00E7);map.put(0x00C8,0x00E8);map.put(0x00C9,0x00E9);
        map.put(0x00CA,0x00EA);map.put(0x00CB,0x00EB);map.put(0x00CC,0x00EC);map.put(0x00CD,0x00ED);
        map.put(0x00CE,0x00EE);map.put(0x00CF,0x00EF);map.put(0x00D0,0x00F0);map.put(0x00D1,0x00F1);
        map.put(0x00D2,0x00F2);map.put(0x00D3,0x00F3);map.put(0x00D4,0x00F4);map.put(0x00D5,0x00F5);
        map.put(0x00D6,0x00F6);map.put(0x00D8,0x00F8);map.put(0x00D9,0x00F9);map.put(0x00DA,0x00FA);
        map.put(0x00DB,0x00FB);map.put(0x00DC,0x00FC);map.put(0x00DD,0x00FD);map.put(0x00DE,0x00FE);
        map.put(0x0100,0x0101);map.put(0x0102,0x0103);map.put(0x0104,0x0105);map.put(0x0106,0x0107);
        map.put(0x0108,0x0109);map.put(0x010A,0x010B);map.put(0x010C,0x010D);map.put(0x010E,0x010F);
        map.put(0x0110,0x0111);map.put(0x0112,0x0113);map.put(0x0114,0x0115);map.put(0x0116,0x0117);
        map.put(0x0118,0x0119);map.put(0x011A,0x011B);map.put(0x011C,0x011D);map.put(0x011E,0x011F);
        map.put(0x0120,0x0121);map.put(0x0122,0x0123);map.put(0x0124,0x0125);map.put(0x0126,0x0127);
        map.put(0x0128,0x0129);map.put(0x012A,0x012B);map.put(0x012C,0x012D);map.put(0x012E,0x012F);
        map.put(0x0130,0x0069);map.put(0x0132,0x0133);map.put(0x0134,0x0135);map.put(0x0136,0x0137);
        map.put(0x0139,0x013A);map.put(0x013B,0x013C);map.put(0x013D,0x013E);map.put(0x013F,0x0140);
        map.put(0x0141,0x0142);map.put(0x0143,0x0144);map.put(0x0145,0x0146);map.put(0x0147,0x0148);
        map.put(0x014A,0x014B);map.put(0x014C,0x014D);map.put(0x014E,0x014F);map.put(0x0150,0x0151);
        map.put(0x0152,0x0153);map.put(0x0154,0x0155);map.put(0x0156,0x0157);map.put(0x0158,0x0159);
        map.put(0x015A,0x015B);map.put(0x015C,0x015D);map.put(0x015E,0x015F);map.put(0x0160,0x0161);
        map.put(0x0162,0x0163);map.put(0x0164,0x0165);map.put(0x0166,0x0167);map.put(0x0168,0x0169);
        map.put(0x016A,0x016B);map.put(0x016C,0x016D);map.put(0x016E,0x016F);map.put(0x0170,0x0171);
        map.put(0x0172,0x0173);map.put(0x0174,0x0175);map.put(0x0176,0x0177);map.put(0x0178,0x00FF);
        map.put(0x0179,0x017A);map.put(0x017B,0x017C);map.put(0x017D,0x017E);map.put(0x0181,0x0253);
        map.put(0x0182,0x0183);map.put(0x0184,0x0185);map.put(0x0186,0x0254);map.put(0x0187,0x0188);
        map.put(0x0189,0x0256);map.put(0x018A,0x0257);map.put(0x018B,0x018C);map.put(0x018E,0x01DD);
        map.put(0x018F,0x0259);map.put(0x0190,0x025B);map.put(0x0191,0x0192);map.put(0x0193,0x0260);
        map.put(0x0194,0x0263);map.put(0x0196,0x0269);map.put(0x0197,0x0268);map.put(0x0198,0x0199);
        map.put(0x019C,0x026F);map.put(0x019D,0x0272);map.put(0x019F,0x0275);map.put(0x01A0,0x01A1);
        map.put(0x01A2,0x01A3);map.put(0x01A4,0x01A5);map.put(0x01A6,0x0280);map.put(0x01A7,0x01A8);
        map.put(0x01A9,0x0283);map.put(0x01AC,0x01AD);map.put(0x01AE,0x0288);map.put(0x01AF,0x01B0);
        map.put(0x01B1,0x028A);map.put(0x01B2,0x028B);map.put(0x01B3,0x01B4);map.put(0x01B5,0x01B6);
        map.put(0x01B7,0x0292);map.put(0x01B8,0x01B9);map.put(0x01BC,0x01BD);map.put(0x01C4,0x01C6);
        map.put(0x01C5,0x01C6);map.put(0x01C7,0x01C9);map.put(0x01C8,0x01C9);map.put(0x01CA,0x01CC);
        map.put(0x01CB,0x01CC);map.put(0x01CD,0x01CE);map.put(0x01CF,0x01D0);map.put(0x01D1,0x01D2);
        map.put(0x01D3,0x01D4);map.put(0x01D5,0x01D6);map.put(0x01D7,0x01D8);map.put(0x01D9,0x01DA);
        map.put(0x01DB,0x01DC);map.put(0x01DE,0x01DF);map.put(0x01E0,0x01E1);map.put(0x01E2,0x01E3);
        map.put(0x01E4,0x01E5);map.put(0x01E6,0x01E7);map.put(0x01E8,0x01E9);map.put(0x01EA,0x01EB);
        map.put(0x01EC,0x01ED);map.put(0x01EE,0x01EF);map.put(0x01F1,0x01F3);map.put(0x01F2,0x01F3);
        map.put(0x01F4,0x01F5);map.put(0x01F6,0x0195);map.put(0x01F7,0x01BF);map.put(0x01F8,0x01F9);
        map.put(0x01FA,0x01FB);map.put(0x01FC,0x01FD);map.put(0x01FE,0x01FF);map.put(0x0200,0x0201);
        map.put(0x0202,0x0203);map.put(0x0204,0x0205);map.put(0x0206,0x0207);map.put(0x0208,0x0209);
        map.put(0x020A,0x020B);map.put(0x020C,0x020D);map.put(0x020E,0x020F);map.put(0x0210,0x0211);
        map.put(0x0212,0x0213);map.put(0x0214,0x0215);map.put(0x0216,0x0217);map.put(0x0218,0x0219);
        map.put(0x021A,0x021B);map.put(0x021C,0x021D);map.put(0x021E,0x021F);map.put(0x0220,0x019E);
        map.put(0x0222,0x0223);map.put(0x0224,0x0225);map.put(0x0226,0x0227);map.put(0x0228,0x0229);
        map.put(0x022A,0x022B);map.put(0x022C,0x022D);map.put(0x022E,0x022F);map.put(0x0230,0x0231);
        map.put(0x0232,0x0233);map.put(0x023A,0x2C65);map.put(0x023B,0x023C);map.put(0x023D,0x019A);
        map.put(0x023E,0x2C66);map.put(0x0241,0x0242);map.put(0x0243,0x0180);map.put(0x0244,0x0289);
        map.put(0x0245,0x028C);map.put(0x0246,0x0247);map.put(0x0248,0x0249);map.put(0x024A,0x024B);
        map.put(0x024C,0x024D);map.put(0x024E,0x024F);map.put(0x0370,0x0371);map.put(0x0372,0x0373);
        map.put(0x0376,0x0377);map.put(0x037F,0x03F3);map.put(0x0386,0x03AC);map.put(0x0388,0x03AD);
        map.put(0x0389,0x03AE);map.put(0x038A,0x03AF);map.put(0x038C,0x03CC);map.put(0x038E,0x03CD);
        map.put(0x038F,0x03CE);map.put(0x0391,0x03B1);map.put(0x0392,0x03B2);map.put(0x0393,0x03B3);
        map.put(0x0394,0x03B4);map.put(0x0395,0x03B5);map.put(0x0396,0x03B6);map.put(0x0397,0x03B7);
        map.put(0x0398,0x03B8);map.put(0x0399,0x03B9);map.put(0x039A,0x03BA);map.put(0x039B,0x03BB);
        map.put(0x039C,0x03BC);map.put(0x039D,0x03BD);map.put(0x039E,0x03BE);map.put(0x039F,0x03BF);
        map.put(0x03A0,0x03C0);map.put(0x03A1,0x03C1);map.put(0x03A3,0x03C3);map.put(0x03A4,0x03C4);
        map.put(0x03A5,0x03C5);map.put(0x03A6,0x03C6);map.put(0x03A7,0x03C7);map.put(0x03A8,0x03C8);
        map.put(0x03A9,0x03C9);map.put(0x03AA,0x03CA);map.put(0x03AB,0x03CB);map.put(0x03CF,0x03D7);
        map.put(0x03D8,0x03D9);map.put(0x03DA,0x03DB);map.put(0x03DC,0x03DD);map.put(0x03DE,0x03DF);
        map.put(0x03E0,0x03E1);map.put(0x03E2,0x03E3);map.put(0x03E4,0x03E5);map.put(0x03E6,0x03E7);
        map.put(0x03E8,0x03E9);map.put(0x03EA,0x03EB);map.put(0x03EC,0x03ED);map.put(0x03EE,0x03EF);
        map.put(0x03F4,0x03B8);map.put(0x03F7,0x03F8);map.put(0x03F9,0x03F2);map.put(0x03FA,0x03FB);
        map.put(0x03FD,0x037B);map.put(0x03FE,0x037C);map.put(0x03FF,0x037D);map.put(0x0400,0x0450);
        map.put(0x0401,0x0451);map.put(0x0402,0x0452);map.put(0x0403,0x0453);map.put(0x0404,0x0454);
        map.put(0x0405,0x0455);map.put(0x0406,0x0456);map.put(0x0407,0x0457);map.put(0x0408,0x0458);
        map.put(0x0409,0x0459);map.put(0x040A,0x045A);map.put(0x040B,0x045B);map.put(0x040C,0x045C);
        map.put(0x040D,0x045D);map.put(0x040E,0x045E);map.put(0x040F,0x045F);map.put(0x0410,0x0430);
        map.put(0x0411,0x0431);map.put(0x0412,0x0432);map.put(0x0413,0x0433);map.put(0x0414,0x0434);
        map.put(0x0415,0x0435);map.put(0x0416,0x0436);map.put(0x0417,0x0437);map.put(0x0418,0x0438);
        map.put(0x0419,0x0439);map.put(0x041A,0x043A);map.put(0x041B,0x043B);map.put(0x041C,0x043C);
        map.put(0x041D,0x043D);map.put(0x041E,0x043E);map.put(0x041F,0x043F);map.put(0x0420,0x0440);
        map.put(0x0421,0x0441);map.put(0x0422,0x0442);map.put(0x0423,0x0443);map.put(0x0424,0x0444);
        map.put(0x0425,0x0445);map.put(0x0426,0x0446);map.put(0x0427,0x0447);map.put(0x0428,0x0448);
        map.put(0x0429,0x0449);map.put(0x042A,0x044A);map.put(0x042B,0x044B);map.put(0x042C,0x044C);
        map.put(0x042D,0x044D);map.put(0x042E,0x044E);map.put(0x042F,0x044F);map.put(0x0460,0x0461);
        map.put(0x0462,0x0463);map.put(0x0464,0x0465);map.put(0x0466,0x0467);map.put(0x0468,0x0469);
        map.put(0x046A,0x046B);map.put(0x046C,0x046D);map.put(0x046E,0x046F);map.put(0x0470,0x0471);
        map.put(0x0472,0x0473);map.put(0x0474,0x0475);map.put(0x0476,0x0477);map.put(0x0478,0x0479);
        map.put(0x047A,0x047B);map.put(0x047C,0x047D);map.put(0x047E,0x047F);map.put(0x0480,0x0481);
        map.put(0x048A,0x048B);map.put(0x048C,0x048D);map.put(0x048E,0x048F);map.put(0x0490,0x0491);
        map.put(0x0492,0x0493);map.put(0x0494,0x0495);map.put(0x0496,0x0497);map.put(0x0498,0x0499);
        map.put(0x049A,0x049B);map.put(0x049C,0x049D);map.put(0x049E,0x049F);map.put(0x04A0,0x04A1);
        map.put(0x04A2,0x04A3);map.put(0x04A4,0x04A5);map.put(0x04A6,0x04A7);map.put(0x04A8,0x04A9);
        map.put(0x04AA,0x04AB);map.put(0x04AC,0x04AD);map.put(0x04AE,0x04AF);map.put(0x04B0,0x04B1);
        map.put(0x04B2,0x04B3);map.put(0x04B4,0x04B5);map.put(0x04B6,0x04B7);map.put(0x04B8,0x04B9);
        map.put(0x04BA,0x04BB);map.put(0x04BC,0x04BD);map.put(0x04BE,0x04BF);map.put(0x04C0,0x04CF);
        map.put(0x04C1,0x04C2);map.put(0x04C3,0x04C4);map.put(0x04C5,0x04C6);map.put(0x04C7,0x04C8);
        map.put(0x04C9,0x04CA);map.put(0x04CB,0x04CC);map.put(0x04CD,0x04CE);map.put(0x04D0,0x04D1);
        map.put(0x04D2,0x04D3);map.put(0x04D4,0x04D5);map.put(0x04D6,0x04D7);map.put(0x04D8,0x04D9);
        map.put(0x04DA,0x04DB);map.put(0x04DC,0x04DD);map.put(0x04DE,0x04DF);map.put(0x04E0,0x04E1);
        map.put(0x04E2,0x04E3);map.put(0x04E4,0x04E5);map.put(0x04E6,0x04E7);map.put(0x04E8,0x04E9);
        map.put(0x04EA,0x04EB);map.put(0x04EC,0x04ED);map.put(0x04EE,0x04EF);map.put(0x04F0,0x04F1);
        map.put(0x04F2,0x04F3);map.put(0x04F4,0x04F5);map.put(0x04F6,0x04F7);map.put(0x04F8,0x04F9);
        map.put(0x04FA,0x04FB);map.put(0x04FC,0x04FD);map.put(0x04FE,0x04FF);map.put(0x0500,0x0501);
        map.put(0x0502,0x0503);map.put(0x0504,0x0505);map.put(0x0506,0x0507);map.put(0x0508,0x0509);
        map.put(0x050A,0x050B);map.put(0x050C,0x050D);map.put(0x050E,0x050F);map.put(0x0510,0x0511);
        map.put(0x0512,0x0513);map.put(0x0514,0x0515);map.put(0x0516,0x0517);map.put(0x0518,0x0519);
        map.put(0x051A,0x051B);map.put(0x051C,0x051D);map.put(0x051E,0x051F);map.put(0x0520,0x0521);
        map.put(0x0522,0x0523);map.put(0x0524,0x0525);map.put(0x0526,0x0527);map.put(0x0528,0x0529);
        map.put(0x052A,0x052B);map.put(0x052C,0x052D);map.put(0x052E,0x052F);map.put(0x0531,0x0561);
        map.put(0x0532,0x0562);map.put(0x0533,0x0563);map.put(0x0534,0x0564);map.put(0x0535,0x0565);
        map.put(0x0536,0x0566);map.put(0x0537,0x0567);map.put(0x0538,0x0568);map.put(0x0539,0x0569);
        map.put(0x053A,0x056A);map.put(0x053B,0x056B);map.put(0x053C,0x056C);map.put(0x053D,0x056D);
        map.put(0x053E,0x056E);map.put(0x053F,0x056F);map.put(0x0540,0x0570);map.put(0x0541,0x0571);
        map.put(0x0542,0x0572);map.put(0x0543,0x0573);map.put(0x0544,0x0574);map.put(0x0545,0x0575);
        map.put(0x0546,0x0576);map.put(0x0547,0x0577);map.put(0x0548,0x0578);map.put(0x0549,0x0579);
        map.put(0x054A,0x057A);map.put(0x054B,0x057B);map.put(0x054C,0x057C);map.put(0x054D,0x057D);
        map.put(0x054E,0x057E);map.put(0x054F,0x057F);map.put(0x0550,0x0580);map.put(0x0551,0x0581);
        map.put(0x0552,0x0582);map.put(0x0553,0x0583);map.put(0x0554,0x0584);map.put(0x0555,0x0585);
        map.put(0x0556,0x0586);map.put(0x10A0,0x2D00);map.put(0x10A1,0x2D01);map.put(0x10A2,0x2D02);
        map.put(0x10A3,0x2D03);map.put(0x10A4,0x2D04);map.put(0x10A5,0x2D05);map.put(0x10A6,0x2D06);
        map.put(0x10A7,0x2D07);map.put(0x10A8,0x2D08);map.put(0x10A9,0x2D09);map.put(0x10AA,0x2D0A);
        map.put(0x10AB,0x2D0B);map.put(0x10AC,0x2D0C);map.put(0x10AD,0x2D0D);map.put(0x10AE,0x2D0E);
        map.put(0x10AF,0x2D0F);map.put(0x10B0,0x2D10);map.put(0x10B1,0x2D11);map.put(0x10B2,0x2D12);
        map.put(0x10B3,0x2D13);map.put(0x10B4,0x2D14);map.put(0x10B5,0x2D15);map.put(0x10B6,0x2D16);
        map.put(0x10B7,0x2D17);map.put(0x10B8,0x2D18);map.put(0x10B9,0x2D19);map.put(0x10BA,0x2D1A);
        map.put(0x10BB,0x2D1B);map.put(0x10BC,0x2D1C);map.put(0x10BD,0x2D1D);map.put(0x10BE,0x2D1E);
        map.put(0x10BF,0x2D1F);map.put(0x10C0,0x2D20);map.put(0x10C1,0x2D21);map.put(0x10C2,0x2D22);
        map.put(0x10C3,0x2D23);map.put(0x10C4,0x2D24);map.put(0x10C5,0x2D25);map.put(0x10C7,0x2D27);
        map.put(0x10CD,0x2D2D);map.put(0x1C90,0x10D0);map.put(0x1C91,0x10D1);map.put(0x1C92,0x10D2);
        map.put(0x1C93,0x10D3);map.put(0x1C94,0x10D4);map.put(0x1C95,0x10D5);map.put(0x1C96,0x10D6);
        map.put(0x1C97,0x10D7);map.put(0x1C98,0x10D8);map.put(0x1C99,0x10D9);map.put(0x1C9A,0x10DA);
        map.put(0x1C9B,0x10DB);map.put(0x1C9C,0x10DC);map.put(0x1C9D,0x10DD);map.put(0x1C9E,0x10DE);
        map.put(0x1C9F,0x10DF);map.put(0x1CA0,0x10E0);map.put(0x1CA1,0x10E1);map.put(0x1CA2,0x10E2);
        map.put(0x1CA3,0x10E3);map.put(0x1CA4,0x10E4);map.put(0x1CA5,0x10E5);map.put(0x1CA6,0x10E6);
        map.put(0x1CA7,0x10E7);map.put(0x1CA8,0x10E8);map.put(0x1CA9,0x10E9);map.put(0x1CAA,0x10EA);
        map.put(0x1CAB,0x10EB);map.put(0x1CAC,0x10EC);map.put(0x1CAD,0x10ED);map.put(0x1CAE,0x10EE);
        map.put(0x1CAF,0x10EF);map.put(0x1CB0,0x10F0);map.put(0x1CB1,0x10F1);map.put(0x1CB2,0x10F2);
        map.put(0x1CB3,0x10F3);map.put(0x1CB4,0x10F4);map.put(0x1CB5,0x10F5);map.put(0x1CB6,0x10F6);
        map.put(0x1CB7,0x10F7);map.put(0x1CB8,0x10F8);map.put(0x1CB9,0x10F9);map.put(0x1CBA,0x10FA);
        map.put(0x1CBD,0x10FD);map.put(0x1CBE,0x10FE);map.put(0x1CBF,0x10FF);map.put(0x1E00,0x1E01);
        map.put(0x1E02,0x1E03);map.put(0x1E04,0x1E05);map.put(0x1E06,0x1E07);map.put(0x1E08,0x1E09);
        map.put(0x1E0A,0x1E0B);map.put(0x1E0C,0x1E0D);map.put(0x1E0E,0x1E0F);map.put(0x1E10,0x1E11);
        map.put(0x1E12,0x1E13);map.put(0x1E14,0x1E15);map.put(0x1E16,0x1E17);map.put(0x1E18,0x1E19);
        map.put(0x1E1A,0x1E1B);map.put(0x1E1C,0x1E1D);map.put(0x1E1E,0x1E1F);map.put(0x1E20,0x1E21);
        map.put(0x1E22,0x1E23);map.put(0x1E24,0x1E25);map.put(0x1E26,0x1E27);map.put(0x1E28,0x1E29);
        map.put(0x1E2A,0x1E2B);map.put(0x1E2C,0x1E2D);map.put(0x1E2E,0x1E2F);map.put(0x1E30,0x1E31);
        map.put(0x1E32,0x1E33);map.put(0x1E34,0x1E35);map.put(0x1E36,0x1E37);map.put(0x1E38,0x1E39);
        map.put(0x1E3A,0x1E3B);map.put(0x1E3C,0x1E3D);map.put(0x1E3E,0x1E3F);map.put(0x1E40,0x1E41);
        map.put(0x1E42,0x1E43);map.put(0x1E44,0x1E45);map.put(0x1E46,0x1E47);map.put(0x1E48,0x1E49);
        map.put(0x1E4A,0x1E4B);map.put(0x1E4C,0x1E4D);map.put(0x1E4E,0x1E4F);map.put(0x1E50,0x1E51);
        map.put(0x1E52,0x1E53);map.put(0x1E54,0x1E55);map.put(0x1E56,0x1E57);map.put(0x1E58,0x1E59);
        map.put(0x1E5A,0x1E5B);map.put(0x1E5C,0x1E5D);map.put(0x1E5E,0x1E5F);map.put(0x1E60,0x1E61);
        map.put(0x1E62,0x1E63);map.put(0x1E64,0x1E65);map.put(0x1E66,0x1E67);map.put(0x1E68,0x1E69);
        map.put(0x1E6A,0x1E6B);map.put(0x1E6C,0x1E6D);map.put(0x1E6E,0x1E6F);map.put(0x1E70,0x1E71);
        map.put(0x1E72,0x1E73);map.put(0x1E74,0x1E75);map.put(0x1E76,0x1E77);map.put(0x1E78,0x1E79);
        map.put(0x1E7A,0x1E7B);map.put(0x1E7C,0x1E7D);map.put(0x1E7E,0x1E7F);map.put(0x1E80,0x1E81);
        map.put(0x1E82,0x1E83);map.put(0x1E84,0x1E85);map.put(0x1E86,0x1E87);map.put(0x1E88,0x1E89);
        map.put(0x1E8A,0x1E8B);map.put(0x1E8C,0x1E8D);map.put(0x1E8E,0x1E8F);map.put(0x1E90,0x1E91);
        map.put(0x1E92,0x1E93);map.put(0x1E94,0x1E95);map.put(0x1E9E,0x00DF);map.put(0x1EA0,0x1EA1);
        map.put(0x1EA2,0x1EA3);map.put(0x1EA4,0x1EA5);map.put(0x1EA6,0x1EA7);map.put(0x1EA8,0x1EA9);
        map.put(0x1EAA,0x1EAB);map.put(0x1EAC,0x1EAD);map.put(0x1EAE,0x1EAF);map.put(0x1EB0,0x1EB1);
        map.put(0x1EB2,0x1EB3);map.put(0x1EB4,0x1EB5);map.put(0x1EB6,0x1EB7);map.put(0x1EB8,0x1EB9);
        map.put(0x1EBA,0x1EBB);map.put(0x1EBC,0x1EBD);map.put(0x1EBE,0x1EBF);map.put(0x1EC0,0x1EC1);
        map.put(0x1EC2,0x1EC3);map.put(0x1EC4,0x1EC5);map.put(0x1EC6,0x1EC7);map.put(0x1EC8,0x1EC9);
        map.put(0x1ECA,0x1ECB);map.put(0x1ECC,0x1ECD);map.put(0x1ECE,0x1ECF);map.put(0x1ED0,0x1ED1);
        map.put(0x1ED2,0x1ED3);map.put(0x1ED4,0x1ED5);map.put(0x1ED6,0x1ED7);map.put(0x1ED8,0x1ED9);
        map.put(0x1EDA,0x1EDB);map.put(0x1EDC,0x1EDD);map.put(0x1EDE,0x1EDF);map.put(0x1EE0,0x1EE1);
        map.put(0x1EE2,0x1EE3);map.put(0x1EE4,0x1EE5);map.put(0x1EE6,0x1EE7);map.put(0x1EE8,0x1EE9);
        map.put(0x1EEA,0x1EEB);map.put(0x1EEC,0x1EED);map.put(0x1EEE,0x1EEF);map.put(0x1EF0,0x1EF1);
        map.put(0x1EF2,0x1EF3);map.put(0x1EF4,0x1EF5);map.put(0x1EF6,0x1EF7);map.put(0x1EF8,0x1EF9);
        map.put(0x1EFA,0x1EFB);map.put(0x1EFC,0x1EFD);map.put(0x1EFE,0x1EFF);map.put(0x1F08,0x1F00);
        map.put(0x1F09,0x1F01);map.put(0x1F0A,0x1F02);map.put(0x1F0B,0x1F03);map.put(0x1F0C,0x1F04);
        map.put(0x1F0D,0x1F05);map.put(0x1F0E,0x1F06);map.put(0x1F0F,0x1F07);map.put(0x1F18,0x1F10);
        map.put(0x1F19,0x1F11);map.put(0x1F1A,0x1F12);map.put(0x1F1B,0x1F13);map.put(0x1F1C,0x1F14);
        map.put(0x1F1D,0x1F15);map.put(0x1F28,0x1F20);map.put(0x1F29,0x1F21);map.put(0x1F2A,0x1F22);
        map.put(0x1F2B,0x1F23);map.put(0x1F2C,0x1F24);map.put(0x1F2D,0x1F25);map.put(0x1F2E,0x1F26);
        map.put(0x1F2F,0x1F27);map.put(0x1F38,0x1F30);map.put(0x1F39,0x1F31);map.put(0x1F3A,0x1F32);
        map.put(0x1F3B,0x1F33);map.put(0x1F3C,0x1F34);map.put(0x1F3D,0x1F35);map.put(0x1F3E,0x1F36);
        map.put(0x1F3F,0x1F37);map.put(0x1F48,0x1F40);map.put(0x1F49,0x1F41);map.put(0x1F4A,0x1F42);
        map.put(0x1F4B,0x1F43);map.put(0x1F4C,0x1F44);map.put(0x1F4D,0x1F45);map.put(0x1F59,0x1F51);
        map.put(0x1F5B,0x1F53);map.put(0x1F5D,0x1F55);map.put(0x1F5F,0x1F57);map.put(0x1F68,0x1F60);
        map.put(0x1F69,0x1F61);map.put(0x1F6A,0x1F62);map.put(0x1F6B,0x1F63);map.put(0x1F6C,0x1F64);
        map.put(0x1F6D,0x1F65);map.put(0x1F6E,0x1F66);map.put(0x1F6F,0x1F67);map.put(0x1F88,0x1F80);
        map.put(0x1F89,0x1F81);map.put(0x1F8A,0x1F82);map.put(0x1F8B,0x1F83);map.put(0x1F8C,0x1F84);
        map.put(0x1F8D,0x1F85);map.put(0x1F8E,0x1F86);map.put(0x1F8F,0x1F87);map.put(0x1F98,0x1F90);
        map.put(0x1F99,0x1F91);map.put(0x1F9A,0x1F92);map.put(0x1F9B,0x1F93);map.put(0x1F9C,0x1F94);
        map.put(0x1F9D,0x1F95);map.put(0x1F9E,0x1F96);map.put(0x1F9F,0x1F97);map.put(0x1FA8,0x1FA0);
        map.put(0x1FA9,0x1FA1);map.put(0x1FAA,0x1FA2);map.put(0x1FAB,0x1FA3);map.put(0x1FAC,0x1FA4);
        map.put(0x1FAD,0x1FA5);map.put(0x1FAE,0x1FA6);map.put(0x1FAF,0x1FA7);map.put(0x1FB8,0x1FB0);
        map.put(0x1FB9,0x1FB1);map.put(0x1FBA,0x1F70);map.put(0x1FBB,0x1F71);map.put(0x1FBC,0x1FB3);
        map.put(0x1FC8,0x1F72);map.put(0x1FC9,0x1F73);map.put(0x1FCA,0x1F74);map.put(0x1FCB,0x1F75);
        map.put(0x1FCC,0x1FC3);map.put(0x1FD8,0x1FD0);map.put(0x1FD9,0x1FD1);map.put(0x1FDA,0x1F76);
        map.put(0x1FDB,0x1F77);map.put(0x1FE8,0x1FE0);map.put(0x1FE9,0x1FE1);map.put(0x1FEA,0x1F7A);
        map.put(0x1FEB,0x1F7B);map.put(0x1FEC,0x1FE5);map.put(0x1FF8,0x1F78);map.put(0x1FF9,0x1F79);
        map.put(0x1FFA,0x1F7C);map.put(0x1FFB,0x1F7D);map.put(0x1FFC,0x1FF3);map.put(0x2126,0x03C9);
        map.put(0x212A,0x006B);map.put(0x212B,0x00E5);map.put(0x2132,0x214E);map.put(0x2160,0x2170);
        map.put(0x2161,0x2171);map.put(0x2162,0x2172);map.put(0x2163,0x2173);map.put(0x2164,0x2174);
        map.put(0x2165,0x2175);map.put(0x2166,0x2176);map.put(0x2167,0x2177);map.put(0x2168,0x2178);
        map.put(0x2169,0x2179);map.put(0x216A,0x217A);map.put(0x216B,0x217B);map.put(0x216C,0x217C);
        map.put(0x216D,0x217D);map.put(0x216E,0x217E);map.put(0x216F,0x217F);map.put(0x2183,0x2184);
        map.put(0x2C00,0x2C30);map.put(0x2C01,0x2C31);map.put(0x2C02,0x2C32);map.put(0x2C03,0x2C33);
        map.put(0x2C04,0x2C34);map.put(0x2C05,0x2C35);map.put(0x2C06,0x2C36);map.put(0x2C07,0x2C37);
        map.put(0x2C08,0x2C38);map.put(0x2C09,0x2C39);map.put(0x2C0A,0x2C3A);map.put(0x2C0B,0x2C3B);
        map.put(0x2C0C,0x2C3C);map.put(0x2C0D,0x2C3D);map.put(0x2C0E,0x2C3E);map.put(0x2C0F,0x2C3F);
        map.put(0x2C10,0x2C40);map.put(0x2C11,0x2C41);map.put(0x2C12,0x2C42);map.put(0x2C13,0x2C43);
        map.put(0x2C14,0x2C44);map.put(0x2C15,0x2C45);map.put(0x2C16,0x2C46);map.put(0x2C17,0x2C47);
        map.put(0x2C18,0x2C48);map.put(0x2C19,0x2C49);map.put(0x2C1A,0x2C4A);map.put(0x2C1B,0x2C4B);
        map.put(0x2C1C,0x2C4C);map.put(0x2C1D,0x2C4D);map.put(0x2C1E,0x2C4E);map.put(0x2C1F,0x2C4F);
        map.put(0x2C20,0x2C50);map.put(0x2C21,0x2C51);map.put(0x2C22,0x2C52);map.put(0x2C23,0x2C53);
        map.put(0x2C24,0x2C54);map.put(0x2C25,0x2C55);map.put(0x2C26,0x2C56);map.put(0x2C27,0x2C57);
        map.put(0x2C28,0x2C58);map.put(0x2C29,0x2C59);map.put(0x2C2A,0x2C5A);map.put(0x2C2B,0x2C5B);
        map.put(0x2C2C,0x2C5C);map.put(0x2C2D,0x2C5D);map.put(0x2C2E,0x2C5E);map.put(0x2C60,0x2C61);
        map.put(0x2C62,0x026B);map.put(0x2C63,0x1D7D);map.put(0x2C64,0x027D);map.put(0x2C67,0x2C68);
        map.put(0x2C69,0x2C6A);map.put(0x2C6B,0x2C6C);map.put(0x2C6D,0x0251);map.put(0x2C6E,0x0271);
        map.put(0x2C6F,0x0250);map.put(0x2C70,0x0252);map.put(0x2C72,0x2C73);map.put(0x2C75,0x2C76);
        map.put(0x2C7E,0x023F);map.put(0x2C7F,0x0240);map.put(0x2C80,0x2C81);map.put(0x2C82,0x2C83);
        map.put(0x2C84,0x2C85);map.put(0x2C86,0x2C87);map.put(0x2C88,0x2C89);map.put(0x2C8A,0x2C8B);
        map.put(0x2C8C,0x2C8D);map.put(0x2C8E,0x2C8F);map.put(0x2C90,0x2C91);map.put(0x2C92,0x2C93);
        map.put(0x2C94,0x2C95);map.put(0x2C96,0x2C97);map.put(0x2C98,0x2C99);map.put(0x2C9A,0x2C9B);
        map.put(0x2C9C,0x2C9D);map.put(0x2C9E,0x2C9F);map.put(0x2CA0,0x2CA1);map.put(0x2CA2,0x2CA3);
        map.put(0x2CA4,0x2CA5);map.put(0x2CA6,0x2CA7);map.put(0x2CA8,0x2CA9);map.put(0x2CAA,0x2CAB);
        map.put(0x2CAC,0x2CAD);map.put(0x2CAE,0x2CAF);map.put(0x2CB0,0x2CB1);map.put(0x2CB2,0x2CB3);
        map.put(0x2CB4,0x2CB5);map.put(0x2CB6,0x2CB7);map.put(0x2CB8,0x2CB9);map.put(0x2CBA,0x2CBB);
        map.put(0x2CBC,0x2CBD);map.put(0x2CBE,0x2CBF);map.put(0x2CC0,0x2CC1);map.put(0x2CC2,0x2CC3);
        map.put(0x2CC4,0x2CC5);map.put(0x2CC6,0x2CC7);map.put(0x2CC8,0x2CC9);map.put(0x2CCA,0x2CCB);
        map.put(0x2CCC,0x2CCD);map.put(0x2CCE,0x2CCF);map.put(0x2CD0,0x2CD1);map.put(0x2CD2,0x2CD3);
        map.put(0x2CD4,0x2CD5);map.put(0x2CD6,0x2CD7);map.put(0x2CD8,0x2CD9);map.put(0x2CDA,0x2CDB);
        map.put(0x2CDC,0x2CDD);map.put(0x2CDE,0x2CDF);map.put(0x2CE0,0x2CE1);map.put(0x2CE2,0x2CE3);
        map.put(0x2CEB,0x2CEC);map.put(0x2CED,0x2CEE);map.put(0x2CF2,0x2CF3);map.put(0xA640,0xA641);
        map.put(0xA642,0xA643);map.put(0xA644,0xA645);map.put(0xA646,0xA647);map.put(0xA648,0xA649);
        map.put(0xA64A,0xA64B);map.put(0xA64C,0xA64D);map.put(0xA64E,0xA64F);map.put(0xA650,0xA651);
        map.put(0xA652,0xA653);map.put(0xA654,0xA655);map.put(0xA656,0xA657);map.put(0xA658,0xA659);
        map.put(0xA65A,0xA65B);map.put(0xA65C,0xA65D);map.put(0xA65E,0xA65F);map.put(0xA660,0xA661);
        map.put(0xA662,0xA663);map.put(0xA664,0xA665);map.put(0xA666,0xA667);map.put(0xA668,0xA669);
        map.put(0xA66A,0xA66B);map.put(0xA66C,0xA66D);map.put(0xA680,0xA681);map.put(0xA682,0xA683);
        map.put(0xA684,0xA685);map.put(0xA686,0xA687);map.put(0xA688,0xA689);map.put(0xA68A,0xA68B);
        map.put(0xA68C,0xA68D);map.put(0xA68E,0xA68F);map.put(0xA690,0xA691);map.put(0xA692,0xA693);
        map.put(0xA694,0xA695);map.put(0xA696,0xA697);map.put(0xA698,0xA699);map.put(0xA69A,0xA69B);
        map.put(0xA722,0xA723);map.put(0xA724,0xA725);map.put(0xA726,0xA727);map.put(0xA728,0xA729);
        map.put(0xA72A,0xA72B);map.put(0xA72C,0xA72D);map.put(0xA72E,0xA72F);map.put(0xA732,0xA733);
        map.put(0xA734,0xA735);map.put(0xA736,0xA737);map.put(0xA738,0xA739);map.put(0xA73A,0xA73B);
        map.put(0xA73C,0xA73D);map.put(0xA73E,0xA73F);map.put(0xA740,0xA741);map.put(0xA742,0xA743);
        map.put(0xA744,0xA745);map.put(0xA746,0xA747);map.put(0xA748,0xA749);map.put(0xA74A,0xA74B);
        map.put(0xA74C,0xA74D);map.put(0xA74E,0xA74F);map.put(0xA750,0xA751);map.put(0xA752,0xA753);
        map.put(0xA754,0xA755);map.put(0xA756,0xA757);map.put(0xA758,0xA759);map.put(0xA75A,0xA75B);
        map.put(0xA75C,0xA75D);map.put(0xA75E,0xA75F);map.put(0xA760,0xA761);map.put(0xA762,0xA763);
        map.put(0xA764,0xA765);map.put(0xA766,0xA767);map.put(0xA768,0xA769);map.put(0xA76A,0xA76B);
        map.put(0xA76C,0xA76D);map.put(0xA76E,0xA76F);map.put(0xA779,0xA77A);map.put(0xA77B,0xA77C);
        map.put(0xA77D,0x1D79);map.put(0xA77E,0xA77F);map.put(0xA780,0xA781);map.put(0xA782,0xA783);
        map.put(0xA784,0xA785);map.put(0xA786,0xA787);map.put(0xA78B,0xA78C);map.put(0xA78D,0x0265);
        map.put(0xA790,0xA791);map.put(0xA792,0xA793);map.put(0xA796,0xA797);map.put(0xA798,0xA799);
        map.put(0xA79A,0xA79B);map.put(0xA79C,0xA79D);map.put(0xA79E,0xA79F);map.put(0xA7A0,0xA7A1);
        map.put(0xA7A2,0xA7A3);map.put(0xA7A4,0xA7A5);map.put(0xA7A6,0xA7A7);map.put(0xA7A8,0xA7A9);
        map.put(0xA7AA,0x0266);map.put(0xA7AB,0x025C);map.put(0xA7AC,0x0261);map.put(0xA7AD,0x026C);
        map.put(0xA7AE,0x026A);map.put(0xA7B0,0x029E);map.put(0xA7B1,0x0287);map.put(0xA7B2,0x029D);
        map.put(0xA7B3,0xAB53);map.put(0xA7B4,0xA7B5);map.put(0xA7B6,0xA7B7);map.put(0xA7B8,0xA7B9);
        map.put(0xA7BA,0xA7BB);map.put(0xA7BC,0xA7BD);map.put(0xA7BE,0xA7BF);map.put(0xA7C2,0xA7C3);
        map.put(0xA7C4,0xA794);map.put(0xA7C5,0x0282);map.put(0xA7C6,0x1D8E);map.put(0xA7C7,0xA7C8);
        map.put(0xA7C9,0xA7CA);map.put(0xA7F5,0xA7F6);map.put(0xFF21,0xFF41);map.put(0xFF22,0xFF42);
        map.put(0xFF23,0xFF43);map.put(0xFF24,0xFF44);map.put(0xFF25,0xFF45);map.put(0xFF26,0xFF46);
        map.put(0xFF27,0xFF47);map.put(0xFF28,0xFF48);map.put(0xFF29,0xFF49);map.put(0xFF2A,0xFF4A);
        map.put(0xFF2B,0xFF4B);map.put(0xFF2C,0xFF4C);map.put(0xFF2D,0xFF4D);map.put(0xFF2E,0xFF4E);
        map.put(0xFF2F,0xFF4F);map.put(0xFF30,0xFF50);map.put(0xFF31,0xFF51);map.put(0xFF32,0xFF52);
        map.put(0xFF33,0xFF53);map.put(0xFF34,0xFF54);map.put(0xFF35,0xFF55);map.put(0xFF36,0xFF56);
        map.put(0xFF37,0xFF57);map.put(0xFF38,0xFF58);map.put(0xFF39,0xFF59);map.put(0xFF3A,0xFF5A);
        map.put(0x10400,0x10428);map.put(0x10401,0x10429);map.put(0x10402,0x1042A);map.put(0x10403,0x1042B);
        map.put(0x10404,0x1042C);map.put(0x10405,0x1042D);map.put(0x10406,0x1042E);map.put(0x10407,0x1042F);
        map.put(0x10408,0x10430);map.put(0x10409,0x10431);map.put(0x1040A,0x10432);map.put(0x1040B,0x10433);
        map.put(0x1040C,0x10434);map.put(0x1040D,0x10435);map.put(0x1040E,0x10436);map.put(0x1040F,0x10437);
        map.put(0x10410,0x10438);map.put(0x10411,0x10439);map.put(0x10412,0x1043A);map.put(0x10413,0x1043B);
        map.put(0x10414,0x1043C);map.put(0x10415,0x1043D);map.put(0x10416,0x1043E);map.put(0x10417,0x1043F);
        map.put(0x10418,0x10440);map.put(0x10419,0x10441);map.put(0x1041A,0x10442);map.put(0x1041B,0x10443);
        map.put(0x1041C,0x10444);map.put(0x1041D,0x10445);map.put(0x1041E,0x10446);map.put(0x1041F,0x10447);
        map.put(0x10420,0x10448);map.put(0x10421,0x10449);map.put(0x10422,0x1044A);map.put(0x10423,0x1044B);
        map.put(0x10424,0x1044C);map.put(0x10425,0x1044D);map.put(0x10426,0x1044E);map.put(0x10427,0x1044F);
        map.put(0x104B0,0x104D8);map.put(0x104B1,0x104D9);map.put(0x104B2,0x104DA);map.put(0x104B3,0x104DB);
        map.put(0x104B4,0x104DC);map.put(0x104B5,0x104DD);map.put(0x104B6,0x104DE);map.put(0x104B7,0x104DF);
        map.put(0x104B8,0x104E0);map.put(0x104B9,0x104E1);map.put(0x104BA,0x104E2);map.put(0x104BB,0x104E3);
        map.put(0x104BC,0x104E4);map.put(0x104BD,0x104E5);map.put(0x104BE,0x104E6);map.put(0x104BF,0x104E7);
        map.put(0x104C0,0x104E8);map.put(0x104C1,0x104E9);map.put(0x104C2,0x104EA);map.put(0x104C3,0x104EB);
        map.put(0x104C4,0x104EC);map.put(0x104C5,0x104ED);map.put(0x104C6,0x104EE);map.put(0x104C7,0x104EF);
        map.put(0x104C8,0x104F0);map.put(0x104C9,0x104F1);map.put(0x104CA,0x104F2);map.put(0x104CB,0x104F3);
        map.put(0x104CC,0x104F4);map.put(0x104CD,0x104F5);map.put(0x104CE,0x104F6);map.put(0x104CF,0x104F7);
        map.put(0x104D0,0x104F8);map.put(0x104D1,0x104F9);map.put(0x104D2,0x104FA);map.put(0x104D3,0x104FB);
        map.put(0x10C80,0x10CC0);map.put(0x10C81,0x10CC1);map.put(0x10C82,0x10CC2);map.put(0x10C83,0x10CC3);
        map.put(0x10C84,0x10CC4);map.put(0x10C85,0x10CC5);map.put(0x10C86,0x10CC6);map.put(0x10C87,0x10CC7);
        map.put(0x10C88,0x10CC8);map.put(0x10C89,0x10CC9);map.put(0x10C8A,0x10CCA);map.put(0x10C8B,0x10CCB);
        map.put(0x10C8C,0x10CCC);map.put(0x10C8D,0x10CCD);map.put(0x10C8E,0x10CCE);map.put(0x10C8F,0x10CCF);
        map.put(0x10C90,0x10CD0);map.put(0x10C91,0x10CD1);map.put(0x10C92,0x10CD2);map.put(0x10C93,0x10CD3);
        map.put(0x10C94,0x10CD4);map.put(0x10C95,0x10CD5);map.put(0x10C96,0x10CD6);map.put(0x10C97,0x10CD7);
        map.put(0x10C98,0x10CD8);map.put(0x10C99,0x10CD9);map.put(0x10C9A,0x10CDA);map.put(0x10C9B,0x10CDB);
        map.put(0x10C9C,0x10CDC);map.put(0x10C9D,0x10CDD);map.put(0x10C9E,0x10CDE);map.put(0x10C9F,0x10CDF);
        map.put(0x10CA0,0x10CE0);map.put(0x10CA1,0x10CE1);map.put(0x10CA2,0x10CE2);map.put(0x10CA3,0x10CE3);
        map.put(0x10CA4,0x10CE4);map.put(0x10CA5,0x10CE5);map.put(0x10CA6,0x10CE6);map.put(0x10CA7,0x10CE7);
        map.put(0x10CA8,0x10CE8);map.put(0x10CA9,0x10CE9);map.put(0x10CAA,0x10CEA);map.put(0x10CAB,0x10CEB);
        map.put(0x10CAC,0x10CEC);map.put(0x10CAD,0x10CED);map.put(0x10CAE,0x10CEE);map.put(0x10CAF,0x10CEF);
        map.put(0x10CB0,0x10CF0);map.put(0x10CB1,0x10CF1);map.put(0x10CB2,0x10CF2);map.put(0x118A0,0x118C0);
        map.put(0x118A1,0x118C1);map.put(0x118A2,0x118C2);map.put(0x118A3,0x118C3);map.put(0x118A4,0x118C4);
        map.put(0x118A5,0x118C5);map.put(0x118A6,0x118C6);map.put(0x118A7,0x118C7);map.put(0x118A8,0x118C8);
        map.put(0x118A9,0x118C9);map.put(0x118AA,0x118CA);map.put(0x118AB,0x118CB);map.put(0x118AC,0x118CC);
        map.put(0x118AD,0x118CD);map.put(0x118AE,0x118CE);map.put(0x118AF,0x118CF);map.put(0x118B0,0x118D0);
        map.put(0x118B1,0x118D1);map.put(0x118B2,0x118D2);map.put(0x118B3,0x118D3);map.put(0x118B4,0x118D4);
        map.put(0x118B5,0x118D5);map.put(0x118B6,0x118D6);map.put(0x118B7,0x118D7);map.put(0x118B8,0x118D8);
        map.put(0x118B9,0x118D9);map.put(0x118BA,0x118DA);map.put(0x118BB,0x118DB);map.put(0x118BC,0x118DC);
        map.put(0x118BD,0x118DD);map.put(0x118BE,0x118DE);map.put(0x118BF,0x118DF);map.put(0x16E40,0x16E60);
        map.put(0x16E41,0x16E61);map.put(0x16E42,0x16E62);map.put(0x16E43,0x16E63);map.put(0x16E44,0x16E64);
        map.put(0x16E45,0x16E65);map.put(0x16E46,0x16E66);map.put(0x16E47,0x16E67);map.put(0x16E48,0x16E68);
        map.put(0x16E49,0x16E69);map.put(0x16E4A,0x16E6A);map.put(0x16E4B,0x16E6B);map.put(0x16E4C,0x16E6C);
        map.put(0x16E4D,0x16E6D);map.put(0x16E4E,0x16E6E);map.put(0x16E4F,0x16E6F);map.put(0x16E50,0x16E70);
        map.put(0x16E51,0x16E71);map.put(0x16E52,0x16E72);map.put(0x16E53,0x16E73);map.put(0x16E54,0x16E74);
        map.put(0x16E55,0x16E75);map.put(0x16E56,0x16E76);map.put(0x16E57,0x16E77);map.put(0x16E58,0x16E78);
        map.put(0x16E59,0x16E79);map.put(0x16E5A,0x16E7A);map.put(0x16E5B,0x16E7B);map.put(0x16E5C,0x16E7C);
        map.put(0x16E5D,0x16E7D);map.put(0x16E5E,0x16E7E);map.put(0x16E5F,0x16E7F);map.put(0x1E900,0x1E922);
        map.put(0x1E901,0x1E923);map.put(0x1E902,0x1E924);map.put(0x1E903,0x1E925);map.put(0x1E904,0x1E926);
        map.put(0x1E905,0x1E927);map.put(0x1E906,0x1E928);map.put(0x1E907,0x1E929);map.put(0x1E908,0x1E92A);
        map.put(0x1E909,0x1E92B);map.put(0x1E90A,0x1E92C);map.put(0x1E90B,0x1E92D);map.put(0x1E90C,0x1E92E);
        map.put(0x1E90D,0x1E92F);map.put(0x1E90E,0x1E930);map.put(0x1E90F,0x1E931);map.put(0x1E910,0x1E932);
        map.put(0x1E911,0x1E933);map.put(0x1E912,0x1E934);map.put(0x1E913,0x1E935);map.put(0x1E914,0x1E936);
        map.put(0x1E915,0x1E937);map.put(0x1E916,0x1E938);map.put(0x1E917,0x1E939);map.put(0x1E918,0x1E93A);
        map.put(0x1E919,0x1E93B);map.put(0x1E91A,0x1E93C);map.put(0x1E91B,0x1E93D);map.put(0x1E91C,0x1E93E);
        map.put(0x1E91D,0x1E93F);map.put(0x1E91E,0x1E940);map.put(0x1E91F,0x1E941);map.put(0x1E920,0x1E942);
        map.put(0x1E921,0x1E943);

        final IndexUnicodeProperties props13 = IndexUnicodeProperties.make(VersionInfo.UNICODE_13_0);
        final var xids13 = props13.getProperty(UcdProperty.XID_Start).getSet("Yes").freeze();
        final var xidc13 = props13.getProperty(UcdProperty.XID_Continue).getSet("Yes").freeze();
        assertEquals("Differences: ----\n" + xids13.cloneAsThawed().removeAll(set) + "\n" + set.cloneAsThawed().removeAll(xids13) + "\n----\n", xids13.cloneAsThawed().add('0', '9'), set);
        assertEquals("Differences: ----\n" + xidc13.cloneAsThawed().removeAll(set2.cloneAsThawed().addAll(set)) + "\n" + set2.cloneAsThawed().addAll(set).removeAll(xidc13) + "\n----\n", xidc13.cloneAsThawed().remove('_'), set2.cloneAsThawed().addAll(set));

        String errors = "";
        for (int c = 0; c <= 0x10FFFF; ++c) {
            String name = props13.getProperty(UcdProperty.Name).getValue(c);
            boolean cwlc = props13.getProperty(UcdProperty.Changes_When_Lowercased).getValue(c).equals("Yes");
            String scf = props13.getProperty(UcdProperty.Lowercase_Mapping).getValue(c);
            String slc = props13.getProperty(UcdProperty.Simple_Lowercase_Mapping).getValue(c);
            Integer cobollccp = map.getValue(c);
            String cobollc = cobollccp == null ? Character.toString(c) : Character.toString(cobollccp);
            if (!slc.equals(cobollc)) {
                errors += Character.toString(c) + " " + name + ": COBOL " + cobollc + " slc " + slc + " " + cwlc + "\n";
            }
        }
        assertEquals("", "", errors);
    }

    @Test
    public void TestNumbers() {
        for (final Age_Values age : Age_Values.values()) {
            if (age == Age_Values.Unassigned) { //  || age.compareTo(Age_Values.V4_0) < 0
                continue;
            }
            final PropertyNames<Age_Values> names = age.getNames();
            // logln(names.getShortName());
            final IndexUnicodeProperties props = IndexUnicodeProperties.make(names.getShortName());
            final UnicodeMap<String> gc = props.load(UcdProperty.General_Category);
            final UnicodeMap<String> nt = props.load(UcdProperty.Numeric_Type);
            final UnicodeSet gcNum =
                    new UnicodeSet()
                            .addAll(gc.getSet(General_Category_Values.Decimal_Number.toString()))
                            .addAll(gc.getSet(General_Category_Values.Letter_Number.toString()))
                            .addAll(gc.getSet(General_Category_Values.Other_Number.toString()));
            final UnicodeSet ntNum =
                    new UnicodeSet()
                            .addAll(nt.getSet(Numeric_Type_Values.Decimal.toString()))
                            .addAll(nt.getSet(Numeric_Type_Values.Digit.toString()))
                            .addAll(nt.getSet(Numeric_Type_Values.Numeric.toString()));
            UnicodeSet diff;
            //            diff = new UnicodeSet(ntNum).removeAll(gcNum);
            //            logln(age + ", nt-gc:N" + diff);
            diff = new UnicodeSet(gcNum).removeAll(ntNum);
            logln(age + ", gc:N-nt" + diff);
        }
    }
}
